"use strict";(self.webpackChunkdata_structure_visualizer=self.webpackChunkdata_structure_visualizer||[]).push([[984],{30984:(e,i,n)=>{n.r(i),n.d(i,{default:()=>F});var s,r,o,t,l,a,h,d,c,m,x=n(57528),g=(n(9950),n(42074)),p=n(44752),j=n(54826),u=n(44414);const b=p.Ay.div(s||(s=(0,x.A)(["\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n\n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n"]))),f=p.Ay.h1(r||(r=(0,x.A)(["\n  font-size: 2.5rem;\n  margin-bottom: 1rem;\n  color: ",";\n\n  @media (max-width: 768px) {\n    font-size: 2rem;\n  }\n"])),e=>e.theme.colors.text),z=p.Ay.p(o||(o=(0,x.A)(["\n  font-size: 1.1rem;\n  line-height: 1.6;\n  margin-bottom: 2rem;\n  color: ",";\n\n  @media (max-width: 768px) {\n    font-size: 1rem;\n  }\n"])),e=>e.theme.colors.textLight),w=p.Ay.div(t||(t=(0,x.A)(["\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 2rem;\n  margin-bottom: 3rem;\n\n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n    gap: 1.5rem;\n  }\n"]))),y=p.Ay.h2(l||(l=(0,x.A)(["\n  font-size: 1.8rem;\n  margin: 2rem 0 1.5rem;\n  color: ",";\n  border-bottom: 2px solid ",";\n  padding-bottom: 0.5rem;\n  width: fit-content;\n\n  @media (max-width: 768px) {\n    font-size: 1.5rem;\n  }\n"])),e=>e.theme.colors.text,e=>e.theme.colors.primary),v=p.Ay.div(a||(a=(0,x.A)(["\n  background-color: ",";\n  border-radius: 0.75rem;\n  padding: 1.5rem;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n  border: 1px solid ",";\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n\n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n  }\n"])),e=>e.theme.colors.card,e=>e.theme.colors.border),A=p.Ay.h3(h||(h=(0,x.A)(["\n  font-size: 1.4rem;\n  margin-bottom: 1rem;\n  color: ",";\n  display: flex;\n  align-items: center;\n"])),e=>e.theme.colors.text),k=p.Ay.div(d||(d=(0,x.A)(["\n  margin-right: 0.75rem;\n  color: ",";\n"])),e=>e.theme.colors.primary),V=p.Ay.p(c||(c=(0,x.A)(["\n  color: ",";\n  line-height: 1.5;\n  margin-bottom: 1.5rem;\n  flex: 1;\n"])),e=>e.theme.colors.textLight),P=(0,p.Ay)(g.N_)(m||(m=(0,x.A)(["\n  background-color: ",";\n  color: ",";\n  padding: 0.75rem 1.25rem;\n  border-radius: 0.5rem;\n  text-decoration: none;\n  text-align: center;\n  font-weight: 500;\n  transition: background-color 0.2s ease;\n  display: inline-block;\n  align-self: flex-start;\n\n  &:hover {\n    background-color: ",";\n  }\n"])),e=>e.theme.colors.primary,e=>{let{theme:i}=e;return i.colors.card},e=>e.theme.colors.primaryDark),F=()=>(0,u.jsxs)(b,{children:[(0,u.jsx)(f,{children:"Algorithm Problems"}),(0,u.jsx)(z,{children:"Explore interactive visualizations of classic algorithm problems. These visualizations help you understand how different algorithms solve specific problems, step by step."}),(0,u.jsx)(y,{children:"Graph Problems"}),(0,u.jsxs)(w,{children:[(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.yd7,{size:24})}),"Cycle Detection in Undirected Graph"]}),(0,u.jsx)(V,{children:"Visualize how depth-first search (DFS) can be used to detect cycles in an undirected graph, a common problem in graph theory."}),(0,u.jsx)(P,{to:"/algorithms/problems/undirected-cycle-detection",children:"Visualize Cycle Detection"})]}),(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.nVN,{size:24})}),"Directed Cycle Detection"]}),(0,u.jsx)(V,{children:"Learn how to detect cycles in directed graphs, which is essential for identifying circular dependencies and potential deadlocks."}),(0,u.jsx)(P,{to:"/algorithms/problems/directed-cycle-detection",children:"Visualize Directed Cycle Detection"})]}),(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.$Fg,{size:24})}),"Eulerian Path"]}),(0,u.jsx)(V,{children:"Explore Eulerian paths and circuits, which visit every edge exactly once. This concept has applications in circuit design and network traversal."}),(0,u.jsx)(P,{to:"/algorithms/problems/eulerian-path",children:"Visualize Eulerian Path"})]}),(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.Eh_,{size:24})}),"Chinese Postman Problem"]}),(0,u.jsx)(V,{children:"Explore the Chinese Postman Problem, which finds the shortest path that visits every edge at least once, with applications in route planning."}),(0,u.jsx)(P,{to:"/algorithms/problems/chinese-postman",children:"Visualize Chinese Postman"})]}),(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.dhv,{size:24})}),"Minimum Edges Feedback Arc"]}),(0,u.jsx)(V,{children:"Visualize the Feedback Arc Set problem, which involves finding the minimum number of edges to remove to make a directed graph acyclic."}),(0,u.jsx)(P,{to:"/algorithms/problems/minimum-edges-feedback-arc",children:"Visualize Feedback Arc Set"})]}),(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.$Fg,{size:24})}),"Traveling Salesman Problem"]}),(0,u.jsx)(V,{children:"Explore one of the most famous NP-hard problems in computer science: finding the shortest possible route that visits every city once and returns to the origin."}),(0,u.jsx)(P,{to:"/algorithms/problems/traveling-salesman",children:"Visualize TSP"})]})]}),(0,u.jsx)(y,{children:"Tree Problems"}),(0,u.jsx)(w,{children:(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.KAn,{size:24})}),"Lowest Common Ancestor"]}),(0,u.jsx)(V,{children:"Visualize how to find the lowest common ancestor of two nodes in a tree, a problem with applications in networking, computational biology, and more."}),(0,u.jsx)(P,{to:"/algorithms/problems/lowest-common-ancestor",children:"Visualize LCA"})]})}),(0,u.jsx)(y,{children:"Grid-Based Problems"}),(0,u.jsxs)(w,{children:[(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.TkH,{size:24})}),"Shortest Path in Grid"]}),(0,u.jsx)(V,{children:"Find the shortest path between two points in a grid with obstacles using breadth-first search (BFS)."}),(0,u.jsx)(P,{to:"/algorithms/problems/shortest-path-grid",children:"Visualize Grid Pathfinding"})]}),(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.zrC,{size:24})}),"Minimum Knight Moves"]}),(0,u.jsx)(V,{children:"Visualize how to find the minimum number of moves a knight needs to reach a target position on a chessboard."}),(0,u.jsx)(P,{to:"/algorithms/problems/minimum-knight-moves",children:"Visualize Knight Moves"})]}),(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.PYU,{size:24})}),"Number of Islands"]}),(0,u.jsx)(V,{children:"Count the number of islands (connected land cells) in a 2D grid representing a map. This problem demonstrates the use of DFS or BFS for connected component analysis."}),(0,u.jsx)(P,{to:"/algorithms/problems/number-of-islands",children:"Visualize Island Counting"})]}),(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.vq8,{size:24})}),"Flood Fill"]}),(0,u.jsx)(V,{children:'Visualize the flood fill algorithm, similar to the "paint bucket" tool in image editing programs, which fills connected regions with a new color.'}),(0,u.jsx)(P,{to:"/algorithms/problems/flood-fill",children:"Visualize Flood Fill"})]}),(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.Ivg,{size:24})}),"Maze Solving"]}),(0,u.jsx)(V,{children:"See how algorithms like DFS, BFS, and A* can solve mazes by finding a path from the entrance to the exit."}),(0,u.jsx)(P,{to:"/algorithms/problems/maze-solving",children:"Visualize Maze Solving"})]}),(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.zrC,{size:24})}),"Knight's Tour"]}),(0,u.jsx)(V,{children:"Visualize the Knight's Tour problem, where a knight visits every square on a chessboard exactly once."}),(0,u.jsx)(P,{to:"/algorithms/problems/knights-tour",children:"Visualize Knight's Tour"})]})]}),(0,u.jsx)(y,{children:"Other Problems"}),(0,u.jsx)(w,{children:(0,u.jsxs)(v,{children:[(0,u.jsxs)(A,{children:[(0,u.jsx)(k,{children:(0,u.jsx)(j.FSj,{size:24})}),"Word Ladder"]}),(0,u.jsx)(V,{children:"Visualize how to transform one word into another by changing one letter at a time, with each intermediate word being valid."}),(0,u.jsx)(P,{to:"/algorithms/problems/word-ladder",children:"Visualize Word Ladder"})]})})]})}}]);