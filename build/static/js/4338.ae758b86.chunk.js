"use strict";(self.webpackChunkdata_structure_visualizer=self.webpackChunkdata_structure_visualizer||[]).push([[4338],{54338:(e,r,n)=>{n.r(r),n.d(r,{default:()=>d});n(9950);var t=n(87225),o=n(44414);const i={value:10,left:{value:5,left:{value:3,left:{value:1},right:{value:4}},right:{value:7,left:{value:6},right:{value:8}}},right:{value:15,left:{value:13,left:{value:11},right:{value:14}},right:{value:18,left:{value:16},right:{value:19}}}},l={name:"Binary Tree Traversals",description:"Binary tree traversal is the process of visiting each node in a binary tree exactly once. There are three common traversal methods: In-order (left, root, right), Pre-order (root, left, right), and Post-order (left, right, root). These traversals are fundamental operations for processing tree data structures and have various applications in programming.",timeComplexity:{best:"O(n)",average:"O(n)",worst:"O(n)"},spaceComplexity:"O(h) where h is the height of the tree (due to recursion stack). In the worst case of a skewed tree, this becomes O(n).",implementations:{javascript:"// In-order Traversal (Left, Root, Right)\nfunction inOrderTraversal(root) {\n  const result = [];\n  \n  function traverse(node) {\n    if (node === null) return;\n    \n    // First recur on left child\n    traverse(node.left);\n    \n    // Then visit the node\n    result.push(node.value);\n    \n    // Finally recur on right child\n    traverse(node.right);\n  }\n  \n  traverse(root);\n  return result;\n}\n\n// Pre-order Traversal (Root, Left, Right)\nfunction preOrderTraversal(root) {\n  const result = [];\n  \n  function traverse(node) {\n    if (node === null) return;\n    \n    // First visit the node\n    result.push(node.value);\n    \n    // Then recur on left child\n    traverse(node.left);\n    \n    // Finally recur on right child\n    traverse(node.right);\n  }\n  \n  traverse(root);\n  return result;\n}\n\n// Post-order Traversal (Left, Right, Root)\nfunction postOrderTraversal(root) {\n  const result = [];\n  \n  function traverse(node) {\n    if (node === null) return;\n    \n    // First recur on left child\n    traverse(node.left);\n    \n    // Then recur on right child\n    traverse(node.right);\n    \n    // Finally visit the node\n    result.push(node.value);\n  }\n  \n  traverse(root);\n  return result;\n}",python:"# In-order Traversal (Left, Root, Right)\ndef in_order_traversal(root):\n    result = []\n    \n    def traverse(node):\n        if node is None:\n            return\n            \n        # First recur on left child\n        traverse(node.left)\n        \n        # Then visit the node\n        result.append(node.value)\n        \n        # Finally recur on right child\n        traverse(node.right)\n    \n    traverse(root)\n    return result\n\n# Pre-order Traversal (Root, Left, Right)\ndef pre_order_traversal(root):\n    result = []\n    \n    def traverse(node):\n        if node is None:\n            return\n            \n        # First visit the node\n        result.append(node.value)\n        \n        # Then recur on left child\n        traverse(node.left)\n        \n        # Finally recur on right child\n        traverse(node.right)\n    \n    traverse(root)\n    return result\n\n# Post-order Traversal (Left, Right, Root)\ndef post_order_traversal(root):\n    result = []\n    \n    def traverse(node):\n        if node is None:\n            return\n            \n        # First recur on left child\n        traverse(node.left)\n        \n        # Then recur on right child\n        traverse(node.right)\n        \n        # Finally visit the node\n        result.append(node.value)\n    \n    traverse(root)\n    return result",java:"// In-order Traversal (Left, Root, Right)\npublic List<Integer> inOrderTraversal(TreeNode root) {\n    List<Integer> result = new ArrayList<>();\n    inOrderHelper(root, result);\n    return result;\n}\n\nprivate void inOrderHelper(TreeNode node, List<Integer> result) {\n    if (node == null) return;\n    \n    // First recur on left child\n    inOrderHelper(node.left, result);\n    \n    // Then visit the node\n    result.add(node.val);\n    \n    // Finally recur on right child\n    inOrderHelper(node.right, result);\n}\n\n// Pre-order Traversal (Root, Left, Right)\npublic List<Integer> preOrderTraversal(TreeNode root) {\n    List<Integer> result = new ArrayList<>();\n    preOrderHelper(root, result);\n    return result;\n}\n\nprivate void preOrderHelper(TreeNode node, List<Integer> result) {\n    if (node == null) return;\n    \n    // First visit the node\n    result.add(node.val);\n    \n    // Then recur on left child\n    preOrderHelper(node.left, result);\n    \n    // Finally recur on right child\n    preOrderHelper(node.right, result);\n}\n\n// Post-order Traversal (Left, Right, Root)\npublic List<Integer> postOrderTraversal(TreeNode root) {\n    List<Integer> result = new ArrayList<>();\n    postOrderHelper(root, result);\n    return result;\n}\n\nprivate void postOrderHelper(TreeNode node, List<Integer> result) {\n    if (node == null) return;\n    \n    // First recur on left child\n    postOrderHelper(node.left, result);\n    \n    // Then recur on right child\n    postOrderHelper(node.right, result);\n    \n    // Finally visit the node\n    result.add(node.val);\n}",cpp:"// In-order Traversal (Left, Root, Right)\nvoid inOrderTraversal(TreeNode* root, vector<int>& result) {\n    if (root == nullptr) return;\n    \n    // First recur on left child\n    inOrderTraversal(root->left, result);\n    \n    // Then visit the node\n    result.push_back(root->val);\n    \n    // Finally recur on right child\n    inOrderTraversal(root->right, result);\n}\n\n// Pre-order Traversal (Root, Left, Right)\nvoid preOrderTraversal(TreeNode* root, vector<int>& result) {\n    if (root == nullptr) return;\n    \n    // First visit the node\n    result.push_back(root->val);\n    \n    // Then recur on left child\n    preOrderTraversal(root->left, result);\n    \n    // Finally recur on right child\n    preOrderTraversal(root->right, result);\n}\n\n// Post-order Traversal (Left, Right, Root)\nvoid postOrderTraversal(TreeNode* root, vector<int>& result) {\n    if (root == nullptr) return;\n    \n    // First recur on left child\n    postOrderTraversal(root->left, result);\n    \n    // Then recur on right child\n    postOrderTraversal(root->right, result);\n    \n    // Finally visit the node\n    result.push_back(root->val);\n}"}},s=e=>{if(e)return{value:e.value,left:s(e.left),right:s(e.right)}},a=e=>(e=>{const r=[],n=[];r.push({tree:s(e),currentNode:null,visitedNodes:[],description:"Starting in-order traversal. We'll visit nodes in the pattern: Left subtree \u2192 Root \u2192 Right subtree."});const t=function(o){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";o&&(o.left&&(r.push({tree:s(e),currentNode:o.value,visitedNodes:[...n],description:"".concat(i,"Moving to left child of node ").concat(o.value,".")}),t(o.left,i+"  ")),n.push(o.value),r.push({tree:s(e),currentNode:o.value,visitedNodes:[...n],description:"".concat(i,"Visiting node ").concat(o.value,".")}),o.right&&(r.push({tree:s(e),currentNode:o.value,visitedNodes:[...n],description:"".concat(i,"Moving to right child of node ").concat(o.value,".")}),t(o.right,i+"  ")))};return t(e),r.push({tree:s(e),currentNode:null,visitedNodes:[...n],description:"In-order traversal complete. Result: [".concat(n.join(", "),"]")}),r})(e),d=()=>(0,o.jsx)(t.A,{algorithmInfo:l,initialTree:i,generateSteps:a})},80771:(e,r,n)=>{n.d(r,{A:()=>t});const t={'code[class*="language-"]':{color:"#ccc",background:"none",fontFamily:"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",fontSize:"1em",textAlign:"left",whiteSpace:"pre",wordSpacing:"normal",wordBreak:"normal",wordWrap:"normal",lineHeight:"1.5",MozTabSize:"4",OTabSize:"4",tabSize:"4",WebkitHyphens:"none",MozHyphens:"none",msHyphens:"none",hyphens:"none"},'pre[class*="language-"]':{color:"#ccc",background:"#2d2d2d",fontFamily:"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",fontSize:"1em",textAlign:"left",whiteSpace:"pre",wordSpacing:"normal",wordBreak:"normal",wordWrap:"normal",lineHeight:"1.5",MozTabSize:"4",OTabSize:"4",tabSize:"4",WebkitHyphens:"none",MozHyphens:"none",msHyphens:"none",hyphens:"none",padding:"1em",margin:".5em 0",overflow:"auto"},':not(pre) > code[class*="language-"]':{background:"#2d2d2d",padding:".1em",borderRadius:".3em",whiteSpace:"normal"},comment:{color:"#999"},"block-comment":{color:"#999"},prolog:{color:"#999"},doctype:{color:"#999"},cdata:{color:"#999"},punctuation:{color:"#ccc"},tag:{color:"#e2777a"},"attr-name":{color:"#e2777a"},namespace:{color:"#e2777a"},deleted:{color:"#e2777a"},"function-name":{color:"#6196cc"},boolean:{color:"#f08d49"},number:{color:"#f08d49"},function:{color:"#f08d49"},property:{color:"#f8c555"},"class-name":{color:"#f8c555"},constant:{color:"#f8c555"},symbol:{color:"#f8c555"},selector:{color:"#cc99cd"},important:{color:"#cc99cd",fontWeight:"bold"},atrule:{color:"#cc99cd"},keyword:{color:"#cc99cd"},builtin:{color:"#cc99cd"},string:{color:"#7ec699"},char:{color:"#7ec699"},"attr-value":{color:"#7ec699"},regex:{color:"#7ec699"},variable:{color:"#7ec699"},operator:{color:"#67cdcc"},entity:{color:"#67cdcc",cursor:"help"},url:{color:"#67cdcc"},bold:{fontWeight:"bold"},italic:{fontStyle:"italic"},inserted:{color:"green"}}},87225:(e,r,n)=>{n.d(r,{A:()=>Y});var t,o,i,l,s,a,d,c,u,h,g,p,v,f,m,y,x,b,T,A,j=n(57528),k=n(9950),S=n(44752),w=n(54826),O=n(42074),R=n(28925),M=n(80771),I=n(44414);const F=S.Ay.div(t||(t=(0,j.A)(["\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n"]))),L=S.Ay.div(o||(o=(0,j.A)(["\n  position: sticky;\n  top: 0;\n  background: ",";\n  padding: 1rem 0;\n  z-index: 100;\n"])),e=>{let{theme:r}=e;return r.colors.card}),N=S.Ay.div(i||(i=(0,j.A)(["\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n"]))),P=(0,S.Ay)(O.N_)(l||(l=(0,j.A)(["\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: ",";\n  font-size: 0.9rem;\n  margin-right: 1rem;\n  \n  &:hover {\n    color: #007bff;\n  }\n"])),e=>{let{theme:r}=e;return r.colors.text}),C=S.Ay.h1(s||(s=(0,j.A)(["\n  margin: 0;\n  font-size: 2rem;\n  color: ",";\n"])),e=>{let{theme:r}=e;return r.colors.text}),H=S.Ay.div(a||(a=(0,j.A)(["\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n  margin-top: 2rem;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n  }\n"]))),z=S.Ay.div(d||(d=(0,j.A)(["\n  background: ",";\n  border-radius: 8px;\n  padding: 1.5rem;\n  min-height: 400px;\n"])),e=>{let{theme:r}=e;return r.colors.gray100}),_=S.Ay.div(c||(c=(0,j.A)(["\n  height: 300px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  margin-bottom: 1rem;\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n"]))),W=S.Ay.button(u||(u=(0,j.A)(["\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n  background: ",";\n  color: ",";\n  cursor: pointer;\n  transition: background 0.3s ease;\n  \n  &:hover {\n    background: ",";\n  }\n  \n  &:disabled {\n    background: #ccc;\n    cursor: not-allowed;\n  }\n"])),e=>{let{theme:r}=e;return r.colors.primary},e=>{let{theme:r}=e;return r.colors.card},e=>{let{theme:r}=e;return r.colors.primaryDark}),B=S.Ay.div(h||(h=(0,j.A)(["\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 1rem;\n"]))),E=S.Ay.div(g||(g=(0,j.A)(["\n  margin-top: 1rem;\n  padding: 1rem;\n  background: ",";\n  border-radius: 4px;\n  font-size: 0.9rem;\n"])),e=>{let{theme:r}=e;return r.colors.gray200}),U=S.Ay.div(p||(p=(0,j.A)(["\n  background: ",";\n  border-radius: 8px;\n  padding: 1.5rem;\n  overflow: auto;\n"])),e=>{let{theme:r}=e;return r.colors.gray100}),D=S.Ay.div(v||(v=(0,j.A)(["\n  margin-bottom: 2rem;\n"]))),K=S.Ay.div(f||(f=(0,j.A)(["\n  margin-bottom: 1rem;\n"]))),V=S.Ay.h3(m||(m=(0,j.A)(["\n  margin: 0 0 0.5rem 0;\n  color: ",";\n"])),e=>{let{theme:r}=e;return r.colors.text}),q=S.Ay.p(y||(y=(0,j.A)(["\n  margin: 0;\n  color: ",";\n  line-height: 1.6;\n"])),e=>{let{theme:r}=e;return r.colors.textLight}),G=S.Ay.div(x||(x=(0,j.A)(["\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 1rem;\n  margin-bottom: 1rem;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: 1fr;\n  }\n"]))),J=S.Ay.div(b||(b=(0,j.A)(["\n  background: ",";\n  padding: 1rem;\n  border-radius: 4px;\n"])),e=>{let{theme:r}=e;return r.colors.gray100}),Q=S.Ay.div(T||(T=(0,j.A)(["\n  font-size: 0.8rem;\n  color: ",";\n  margin-bottom: 0.5rem;\n"])),e=>{let{theme:r}=e;return r.colors.textLight}),X=S.Ay.div(A||(A=(0,j.A)(["\n  font-weight: bold;\n  color: ",";\n"])),e=>{let{theme:r}=e;return r.colors.text}),Y=e=>{let{algorithmInfo:r,initialTree:n,generateSteps:t}=e;const[o,i]=(0,k.useState)(n),[l,s]=(0,k.useState)([]),[a,d]=(0,k.useState)(0),[c,u]=(0,k.useState)(!1),[h,g]=(0,k.useState)(!1),[p,v]=(0,k.useState)(1e3),[f,m]=(0,k.useState)("Click Start to begin visualization"),[y,x]=(0,k.useState)("javascript"),b=(0,k.useRef)(null),T=(0,k.useRef)();(0,k.useEffect)(()=>{const e=t(n);s(e);const r=b.current;return r&&A(n,r),()=>{T.current&&clearTimeout(T.current)}},[n,t]),(0,k.useEffect)(()=>{if(c&&!h&&a<l.length){const e=l[a];m(e.description);const r=b.current;r&&A(e.tree,r,e.currentNode,e.visitedNodes),T.current=setTimeout(()=>{a<l.length-1?d(e=>e+1):u(!1)},p)}return()=>{T.current&&clearTimeout(T.current)}},[c,h,a,l,p]);const A=function(e,r){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,t=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];const o=r.getContext("2d");if(!o)return;o.clearRect(0,0,r.width,r.height),r.width=r.clientWidth,r.height=r.clientHeight;const i=e=>e?1+Math.max(i(e.left),i(e.right)):0,l=i(e),s=20,a=r.height/(l+1),d=r.width/2,c=(e,r,i,l,d)=>{if(!e)return;o.beginPath(),e.value===n?o.fillStyle="#ff9800":t.includes(e.value)?o.fillStyle="#4caf50":o.fillStyle="#2196f3",o.arc(r,i,s,0,2*Math.PI),o.fill(),o.fillStyle="white",o.font="12px Arial",o.textAlign="center",o.textBaseline="middle",o.fillText(e.value.toString(),r,i);const u=d/2;if(e.left){const n=r-u,d=i+a;o.beginPath(),o.strokeStyle=t.includes(e.value)&&t.includes(e.left.value)?"#4caf50":"#aaaaaa",o.lineWidth=2,o.moveTo(r-s*Math.cos(Math.PI/4),i+s*Math.sin(Math.PI/4)),o.lineTo(n+s*Math.cos(Math.PI/4),d-s*Math.sin(Math.PI/4)),o.stroke(),c(e.left,n,d,l+1,u)}if(e.right){const n=r+u,d=i+a;o.beginPath(),o.strokeStyle=t.includes(e.value)&&t.includes(e.right.value)?"#4caf50":"#aaaaaa",o.lineWidth=2,o.moveTo(r+s*Math.cos(Math.PI/4),i+s*Math.sin(Math.PI/4)),o.lineTo(n-s*Math.cos(Math.PI/4),d-s*Math.sin(Math.PI/4)),o.stroke(),c(e.right,n,d,l+1,u)}};c(e,d,30,0,r.width/2)};return(0,I.jsxs)(F,{children:[(0,I.jsxs)(L,{children:[(0,I.jsx)(N,{children:(0,I.jsx)(P,{to:"/data-structures/tree",children:"\u2190 Back to Trees"})}),(0,I.jsx)(C,{children:r.name})]}),(0,I.jsxs)(D,{children:[(0,I.jsxs)(K,{children:[(0,I.jsx)(V,{children:"Description"}),(0,I.jsx)(q,{children:r.description})]}),(0,I.jsxs)(G,{children:[(0,I.jsxs)(J,{children:[(0,I.jsx)(Q,{children:"Best Case"}),(0,I.jsx)(X,{children:r.timeComplexity.best})]}),(0,I.jsxs)(J,{children:[(0,I.jsx)(Q,{children:"Average Case"}),(0,I.jsx)(X,{children:r.timeComplexity.average})]}),(0,I.jsxs)(J,{children:[(0,I.jsx)(Q,{children:"Worst Case"}),(0,I.jsx)(X,{children:r.timeComplexity.worst})]})]}),(0,I.jsxs)(K,{children:[(0,I.jsx)(V,{children:"Space Complexity"}),(0,I.jsx)(q,{children:r.spaceComplexity})]})]}),(0,I.jsxs)(H,{children:[(0,I.jsxs)(z,{children:[(0,I.jsx)(_,{children:(0,I.jsx)("canvas",{ref:b,width:600,height:300,style:{width:"100%",height:"100%"}})}),(0,I.jsxs)(B,{children:[(0,I.jsxs)(W,{onClick:c?()=>{g(!0),T.current&&clearTimeout(T.current)}:()=>{h||(d(0),u(!0)),g(!1)},disabled:c&&!h,children:[c&&!h?(0,I.jsx)(w.kwt,{}):(0,I.jsx)(w.gSK,{}),c&&!h?"Pause":"Start"]}),(0,I.jsxs)(W,{onClick:()=>{if(a<l.length-1){const e=l[a+1];d(e=>e+1),m(e.description);const r=b.current;r&&A(e.tree,r,e.currentNode,e.visitedNodes)}},disabled:!c||h||a>=l.length-1,children:[(0,I.jsx)(w.FH8,{}),"Step"]}),(0,I.jsxs)(W,{onClick:()=>{u(!1),g(!1),d(0),m("Click Start to begin visualization");const e=b.current;e&&A(n,e),T.current&&clearTimeout(T.current)},children:[(0,I.jsx)(w.EEI,{}),"Reset"]})]}),(0,I.jsx)(E,{children:f})]}),(0,I.jsxs)(U,{children:[(0,I.jsx)(V,{children:"Implementation"}),(0,I.jsxs)("div",{children:[(0,I.jsx)(B,{children:Object.keys(r.implementations).map(e=>(0,I.jsx)(W,{onClick:()=>x(e),style:{background:y===e?"#007bff":"#6c757d"},children:e.charAt(0).toUpperCase()+e.slice(1)},e))}),(0,I.jsx)(R.A,{language:y,style:M.A,children:r.implementations[y]})]})]})]})]})}}}]);