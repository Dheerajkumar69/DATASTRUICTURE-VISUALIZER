"use strict";(self.webpackChunkdata_structure_visualizer=self.webpackChunkdata_structure_visualizer||[]).push([[1560],{39676:(e,r,n)=>{n.d(r,{A:()=>$});var t,i,a,o,c,l,s,d,h,m,g,u,f,p,y,b,x,v,S,A,j,k=n(57528),w=n(9950),C=n(44752),z=n(54826),I=n(42074),M=n(28925),R=n(80771),T=n(44414);const F=C.Ay.div(t||(t=(0,k.A)(["\n  padding: 2rem;\n  max-width: 1200px;\n  margin: 0 auto;\n"]))),_=C.Ay.div(i||(i=(0,k.A)(["\n  position: sticky;\n  top: 0;\n  background: ",";\n  padding: 1rem 0;\n  z-index: 100;\n"])),e=>{let{theme:r}=e;return r.colors.background}),B=C.Ay.div(a||(a=(0,k.A)(["\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n"]))),D=(0,C.Ay)(I.N_)(o||(o=(0,k.A)(["\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: ",";\n  font-size: 0.9rem;\n  margin-right: 1rem;\n  \n  &:hover {\n    color: ",";\n  }\n"])),e=>{let{theme:r}=e;return r.colors.textLight},e=>{let{theme:r}=e;return r.colors.primary}),H=C.Ay.h1(c||(c=(0,k.A)(["\n  margin: 0;\n  font-size: 2rem;\n  color: ",";\n"])),e=>{let{theme:r}=e;return r.colors.text}),O=C.Ay.div(l||(l=(0,k.A)(["\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 2rem;\n  margin-top: 2rem;\n"]))),W=C.Ay.div(s||(s=(0,k.A)(["\n  background: ",";\n  border: 1px solid ",";\n  border-radius: 8px;\n  padding: 1.5rem;\n  min-height: 400px;\n"])),e=>{let{theme:r}=e;return r.colors.card},e=>{let{theme:r}=e;return r.colors.border}),P=C.Ay.div(d||(d=(0,k.A)(["\n  display: flex;\n  gap: 0.5rem;\n  margin-bottom: 2rem;\n  flex-wrap: wrap;\n"]))),E=C.Ay.div(h||(h=(0,k.A)(["\n  width: 50px;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: ",";\n  color: ",";\n  border-radius: 4px;\n  font-weight: bold;\n  transition: all 0.3s ease;\n  border: 1px solid ",";\n"])),e=>e.isActive?e.theme.colors.primary:e.isComparing?e.theme.colors.warning:e.theme.colors.gray200,e=>e.isActive||e.isComparing?"white":e.theme.colors.text,e=>{let{theme:r}=e;return r.colors.border}),L=C.Ay.div(m||(m=(0,k.A)(["\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 1rem;\n"]))),N=C.Ay.button(g||(g=(0,k.A)(["\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  padding: 0.5rem 1rem;\n  border: none;\n  border-radius: 4px;\n  background: ",";\n  color: ",";\n  cursor: pointer;\n  transition: background 0.3s ease;\n  \n  &:hover {\n    background: ",";\n  }\n  \n  &:disabled {\n    background: ",";\n    cursor: not-allowed;\n  }\n"])),e=>{let{theme:r}=e;return r.colors.primary},e=>{let{theme:r}=e;return r.colors.card},e=>{let{theme:r}=e;return r.colors.primaryDark},e=>{let{theme:r}=e;return r.colors.gray400}),U=C.Ay.div(u||(u=(0,k.A)(["\n  margin-top: 1rem;\n  padding: 1rem;\n  background: ",";\n  border: 1px solid ",";\n  border-radius: 4px;\n  font-size: 0.9rem;\n  color: ",";\n"])),e=>{let{theme:r}=e;return r.colors.gray100},e=>{let{theme:r}=e;return r.colors.border},e=>{let{theme:r}=e;return r.colors.text}),K=C.Ay.div(f||(f=(0,k.A)(["\n  background: ",";\n  border: 1px solid ",";\n  border-radius: 8px;\n  padding: 1.5rem;\n  overflow: auto;\n"])),e=>{let{theme:r}=e;return r.colors.card},e=>{let{theme:r}=e;return r.colors.border}),q=C.Ay.div(p||(p=(0,k.A)(["\n  margin-bottom: 2rem;\n"]))),G=C.Ay.div(y||(y=(0,k.A)(["\n  margin-bottom: 1rem;\n"]))),J=C.Ay.h3(b||(b=(0,k.A)(["\n  margin: 0 0 0.5rem 0;\n  color: ",";\n"])),e=>{let{theme:r}=e;return r.colors.text}),Q=C.Ay.p(x||(x=(0,k.A)(["\n  margin: 0;\n  color: ",";\n"])),e=>{let{theme:r}=e;return r.colors.textLight}),V=C.Ay.div(v||(v=(0,k.A)(["\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 1rem;\n  margin-bottom: 1rem;\n"]))),X=C.Ay.div(S||(S=(0,k.A)(["\n  background: ",";\n  border: 1px solid ",";\n  padding: 1rem;\n  border-radius: 4px;\n"])),e=>{let{theme:r}=e;return r.colors.gray100},e=>{let{theme:r}=e;return r.colors.border}),Y=C.Ay.div(A||(A=(0,k.A)(["\n  font-size: 0.8rem;\n  color: ",";\n  margin-bottom: 0.5rem;\n"])),e=>{let{theme:r}=e;return r.colors.textLight}),Z=C.Ay.div(j||(j=(0,k.A)(["\n  font-weight: bold;\n  color: ",";\n"])),e=>{let{theme:r}=e;return r.colors.text}),$=e=>{let{algorithmInfo:r,generateSteps:n,defaultArray:t}=e;const[i,a]=(0,w.useState)(t),[o,c]=(0,w.useState)([]),[l,s]=(0,w.useState)([]),[d,h]=(0,w.useState)(!1),[m,g]=(0,w.useState)(!1),[u,f]=(0,w.useState)(0),[p,y]=(0,w.useState)([]),[b,x]=(0,w.useState)(1e3),[v,S]=(0,w.useState)("Click Start to begin visualization"),A=(0,w.useRef)();return(0,w.useEffect)(()=>{if(d&&!m&&u<p.length){const e=p[u];a(e.array),c(e.activeIndices),s(e.comparingIndices),S(e.stepDescription),A.current=setTimeout(()=>{u<p.length-1?f(e=>e+1):h(!1)},b)}return()=>{A.current&&clearTimeout(A.current)}},[d,m,u,p,b]),(0,T.jsxs)(F,{children:[(0,T.jsxs)(_,{children:[(0,T.jsx)(B,{children:(0,T.jsx)(D,{to:"/algorithms",children:"\u2190 Back to Algorithms"})}),(0,T.jsx)(H,{children:r.name})]}),(0,T.jsxs)(q,{children:[(0,T.jsxs)(G,{children:[(0,T.jsx)(J,{children:"Description"}),(0,T.jsx)(Q,{children:r.description})]}),(0,T.jsxs)(V,{children:[(0,T.jsxs)(X,{children:[(0,T.jsx)(Y,{children:"Best Case"}),(0,T.jsx)(Z,{children:r.timeComplexity.best})]}),(0,T.jsxs)(X,{children:[(0,T.jsx)(Y,{children:"Average Case"}),(0,T.jsx)(Z,{children:r.timeComplexity.average})]}),(0,T.jsxs)(X,{children:[(0,T.jsx)(Y,{children:"Worst Case"}),(0,T.jsx)(Z,{children:r.timeComplexity.worst})]})]}),(0,T.jsxs)(G,{children:[(0,T.jsx)(J,{children:"Space Complexity"}),(0,T.jsx)(Q,{children:r.spaceComplexity})]})]}),(0,T.jsxs)(O,{children:[(0,T.jsxs)(W,{children:[(0,T.jsx)(P,{children:i.map((e,r)=>(0,T.jsx)(E,{isActive:o.includes(r),isComparing:l.includes(r),children:e},r))}),(0,T.jsxs)(L,{children:[(0,T.jsxs)(N,{onClick:d?()=>{g(!0),A.current&&clearTimeout(A.current)}:()=>{if(m)return void g(!1);const e=n(i);y(e),f(0),h(!0),g(!1)},disabled:d&&!m,children:[d&&!m?(0,T.jsx)(z.kwt,{}):(0,T.jsx)(z.gSK,{}),d&&!m?"Pause":"Start"]}),(0,T.jsxs)(N,{onClick:()=>{u<p.length-1&&f(e=>e+1)},disabled:!d||m||u>=p.length-1,children:[(0,T.jsx)(z.FH8,{}),"Step"]}),(0,T.jsxs)(N,{onClick:()=>{h(!1),g(!1),f(0),c([]),s([]),S("Click Start to begin visualization"),A.current&&clearTimeout(A.current)},children:[(0,T.jsx)(z.EEI,{}),"Reset"]})]}),(0,T.jsx)(U,{children:v})]}),(0,T.jsxs)(K,{children:[(0,T.jsx)(J,{children:"Implementation"}),Object.entries(r.implementations).map(e=>{let[r,n]=e;return(0,T.jsxs)("div",{children:[(0,T.jsx)(Q,{children:r.charAt(0).toUpperCase()+r.slice(1)}),(0,T.jsx)(M.A,{language:r,style:R.A,children:n})]},r)})]})]})]})}},41560:(e,r,n)=>{n.r(r),n.d(r,{default:()=>c});n(9950);var t=n(39676),i=n(44414);const a={name:"Binary Search",description:"Binary Search is an efficient search algorithm that works on sorted arrays. It repeatedly divides the search interval in half, eliminating half of the elements with each comparison. This approach achieves logarithmic search time.",timeComplexity:{best:"O(1)",average:"O(log n)",worst:"O(log n)"},spaceComplexity:"O(1) for iterative, O(log n) for recursive",implementations:{javascript:"function binarySearch(arr, target) {\n  let left = 0;\n  let right = arr.length - 1;\n  \n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    \n    // Found target\n    if (arr[mid] === target) {\n      return mid;\n    }\n    \n    // Search right half\n    if (arr[mid] < target) {\n      left = mid + 1;\n    } \n    // Search left half\n    else {\n      right = mid - 1;\n    }\n  }\n  \n  // Target not found\n  return -1;\n}\n\n// Recursive implementation\nfunction binarySearchRecursive(arr, target, left = 0, right = arr.length - 1) {\n  // Base case: element not found\n  if (left > right) return -1;\n  \n  const mid = Math.floor((left + right) / 2);\n  \n  // Found target\n  if (arr[mid] === target) {\n    return mid;\n  }\n  \n  // Search right half\n  if (arr[mid] < target) {\n    return binarySearchRecursive(arr, target, mid + 1, right);\n  } \n  // Search left half\n  else {\n    return binarySearchRecursive(arr, target, left, mid - 1);\n  }\n}",python:"def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Found target\n        if arr[mid] == target:\n            return mid\n        \n        # Search right half\n        if arr[mid] < target:\n            left = mid + 1\n        # Search left half\n        else:\n            right = mid - 1\n    \n    # Target not found\n    return -1\n\n# Recursive implementation\ndef binary_search_recursive(arr, target, left=0, right=None):\n    if right is None:\n        right = len(arr) - 1\n    \n    # Base case: element not found\n    if left > right:\n        return -1\n    \n    mid = (left + right) // 2\n    \n    # Found target\n    if arr[mid] == target:\n        return mid\n    \n    # Search right half\n    if arr[mid] < target:\n        return binary_search_recursive(arr, target, mid + 1, right)\n    # Search left half\n    else:\n        return binary_search_recursive(arr, target, left, mid - 1)",java:"public int binarySearch(int[] arr, int target) {\n    int left = 0;\n    int right = arr.length - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2; // Prevents integer overflow\n        \n        // Found target\n        if (arr[mid] == target) {\n            return mid;\n        }\n        \n        // Search right half\n        if (arr[mid] < target) {\n            left = mid + 1;\n        } \n        // Search left half\n        else {\n            right = mid - 1;\n        }\n    }\n    \n    // Target not found\n    return -1;\n}\n\n// Recursive implementation\npublic int binarySearchRecursive(int[] arr, int target, int left, int right) {\n    // Base case: element not found\n    if (left > right) return -1;\n    \n    int mid = left + (right - left) / 2; // Prevents integer overflow\n    \n    // Found target\n    if (arr[mid] == target) {\n        return mid;\n    }\n    \n    // Search right half\n    if (arr[mid] < target) {\n        return binarySearchRecursive(arr, target, mid + 1, right);\n    } \n    // Search left half\n    else {\n        return binarySearchRecursive(arr, target, left, mid - 1);\n    }\n}",cpp:"int binarySearch(vector<int>& arr, int target) {\n    int left = 0;\n    int right = arr.size() - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2; // Prevents integer overflow\n        \n        // Found target\n        if (arr[mid] == target) {\n            return mid;\n        }\n        \n        // Search right half\n        if (arr[mid] < target) {\n            left = mid + 1;\n        } \n        // Search left half\n        else {\n            right = mid - 1;\n        }\n    }\n    \n    // Target not found\n    return -1;\n}\n\n// Recursive implementation\nint binarySearchRecursive(vector<int>& arr, int target, int left, int right) {\n    // Base case: element not found\n    if (left > right) return -1;\n    \n    int mid = left + (right - left) / 2; // Prevents integer overflow\n    \n    // Found target\n    if (arr[mid] == target) {\n        return mid;\n    }\n    \n    // Search right half\n    if (arr[mid] < target) {\n        return binarySearchRecursive(arr, target, mid + 1, right);\n    } \n    // Search left half\n    else {\n        return binarySearchRecursive(arr, target, left, mid - 1);\n    }\n}"}},o=e=>{const r=[...e].sort((e,r)=>e-r),n=Math.floor(r.length/2),t=r[n],i=[];i.push({array:[...r],activeIndices:[],comparingIndices:[],stepDescription:"Starting binary search for target value ".concat(t," in the sorted array")});let a=0,o=r.length-1;for(;a<=o;){const e=Math.floor((a+o)/2);if(i.push({array:[...r],activeIndices:Array.from({length:o-a+1},(e,r)=>r+a),comparingIndices:[e],stepDescription:"Search interval: indices ".concat(a," to ").concat(o,". Checking middle element at index ").concat(e)}),r[e]===t){i.push({array:[...r],activeIndices:[e],comparingIndices:[],stepDescription:"Found target ".concat(t," at index ").concat(e,"!")});break}r[e]<t?(i.push({array:[...r],activeIndices:Array.from({length:o-a+1},(e,r)=>r+a),comparingIndices:[e],stepDescription:"Middle element ".concat(r[e]," < target ").concat(t,". Search right half.")}),a=e+1):(i.push({array:[...r],activeIndices:Array.from({length:o-a+1},(e,r)=>r+a),comparingIndices:[e],stepDescription:"Middle element ".concat(r[e]," > target ").concat(t,". Search left half.")}),o=e-1)}return i[i.length-1].stepDescription!=="Found target ".concat(t," at index ").concat(n,"!")&&i.push({array:[...r],activeIndices:[],comparingIndices:[],stepDescription:"Target ".concat(t," not found in the array.")}),i},c=()=>(0,i.jsx)(t.A,{algorithmInfo:a,generateSteps:o,defaultArray:[23,10,38,64,72,16,5,90,47,29]})},80771:(e,r,n)=>{n.d(r,{A:()=>t});const t={'code[class*="language-"]':{color:"#ccc",background:"none",fontFamily:"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",fontSize:"1em",textAlign:"left",whiteSpace:"pre",wordSpacing:"normal",wordBreak:"normal",wordWrap:"normal",lineHeight:"1.5",MozTabSize:"4",OTabSize:"4",tabSize:"4",WebkitHyphens:"none",MozHyphens:"none",msHyphens:"none",hyphens:"none"},'pre[class*="language-"]':{color:"#ccc",background:"#2d2d2d",fontFamily:"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",fontSize:"1em",textAlign:"left",whiteSpace:"pre",wordSpacing:"normal",wordBreak:"normal",wordWrap:"normal",lineHeight:"1.5",MozTabSize:"4",OTabSize:"4",tabSize:"4",WebkitHyphens:"none",MozHyphens:"none",msHyphens:"none",hyphens:"none",padding:"1em",margin:".5em 0",overflow:"auto"},':not(pre) > code[class*="language-"]':{background:"#2d2d2d",padding:".1em",borderRadius:".3em",whiteSpace:"normal"},comment:{color:"#999"},"block-comment":{color:"#999"},prolog:{color:"#999"},doctype:{color:"#999"},cdata:{color:"#999"},punctuation:{color:"#ccc"},tag:{color:"#e2777a"},"attr-name":{color:"#e2777a"},namespace:{color:"#e2777a"},deleted:{color:"#e2777a"},"function-name":{color:"#6196cc"},boolean:{color:"#f08d49"},number:{color:"#f08d49"},function:{color:"#f08d49"},property:{color:"#f8c555"},"class-name":{color:"#f8c555"},constant:{color:"#f8c555"},symbol:{color:"#f8c555"},selector:{color:"#cc99cd"},important:{color:"#cc99cd",fontWeight:"bold"},atrule:{color:"#cc99cd"},keyword:{color:"#cc99cd"},builtin:{color:"#cc99cd"},string:{color:"#7ec699"},char:{color:"#7ec699"},"attr-value":{color:"#7ec699"},regex:{color:"#7ec699"},variable:{color:"#7ec699"},operator:{color:"#67cdcc"},entity:{color:"#67cdcc",cursor:"help"},url:{color:"#67cdcc"},bold:{fontWeight:"bold"},italic:{fontStyle:"italic"},inserted:{color:"green"}}}}]);