"use strict";(self.webpackChunkdata_structure_visualizer=self.webpackChunkdata_structure_visualizer||[]).push([[3185],{33185:(e,n,r)=>{r.r(n),r.d(n,{default:()=>o});r(9950);var a=r(48102),t=r(44414);const i={name:"Bubble Sort",description:'Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm gets its name because the smaller elements "bubble" to the top of the list.',timeComplexityBest:"O(n)",timeComplexityAverage:"O(n\xb2)",timeComplexityWorst:"O(n\xb2)",spaceComplexity:"O(1)",stability:"Stable",implementations:[{language:"javascript",title:"Bubble Sort - JavaScript Implementation",code:"function bubbleSort(arr) {\n  const n = arr.length;\n  \n  for (let i = 0; i < n - 1; i++) {\n    // Last i elements are already in place\n    let swapped = false;\n    \n    for (let j = 0; j < n - i - 1; j++) {\n      // Compare adjacent elements\n      if (arr[j] > arr[j + 1]) {\n        // Swap if they are in wrong order\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        swapped = true;\n      }\n    }\n    \n    // If no swapping occurred in this pass, array is sorted\n    if (!swapped) break;\n  }\n  \n  return arr;\n}"},{language:"python",title:"Bubble Sort - Python Implementation",code:"def bubble_sort(arr):\n    n = len(arr)\n    \n    # Traverse through all array elements\n    for i in range(n - 1):\n        # Last i elements are already sorted\n        swapped = False\n        \n        # Traverse the array from 0 to n-i-1\n        for j in range(n - i - 1):\n            # Compare adjacent elements\n            if arr[j] > arr[j + 1]:\n                # Swap if they are in wrong order\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                swapped = True\n        \n        # If no swapping occurred in this pass, array is sorted\n        if not swapped:\n            break\n    \n    return arr"},{language:"java",title:"Bubble Sort - Java Implementation",code:"public static void bubbleSort(int[] arr) {\n    int n = arr.length;\n    \n    for (int i = 0; i < n - 1; i++) {\n        // Last i elements are already in place\n        boolean swapped = false;\n        \n        for (int j = 0; j < n - i - 1; j++) {\n            // Compare adjacent elements\n            if (arr[j] > arr[j + 1]) {\n                // Swap if they are in wrong order\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                swapped = true;\n            }\n        }\n        \n        // If no swapping occurred in this pass, array is sorted\n        if (!swapped) break;\n    }\n}"},{language:"c++",title:"Bubble Sort - C++ Implementation",code:"void bubbleSort(vector<int>& arr) {\n    int n = arr.size();\n    \n    for (int i = 0; i < n - 1; i++) {\n        // Last i elements are already in place\n        bool swapped = false;\n        \n        for (int j = 0; j < n - i - 1; j++) {\n            // Compare adjacent elements\n            if (arr[j] > arr[j + 1]) {\n                // Swap if they are in wrong order\n                swap(arr[j], arr[j + 1]);\n                swapped = true;\n            }\n        }\n        \n        // If no swapping occurred in this pass, array is sorted\n        if (!swapped) break;\n    }\n}"}]},s=e=>{const n=[],r=[...e],a=r.length;for(let t=0;t<a-1;t++){let e=!1;for(let i=0;i<a-t-1;i++)n.push({type:"compare",indices:[i,i+1],description:"Comparing adjacent elements: ".concat(r[i]," and ").concat(r[i+1])}),r[i]>r[i+1]&&(n.push({type:"swap",indices:[i,i+1],description:"Swapping ".concat(r[i]," and ").concat(r[i+1]," as they are in wrong order")}),[r[i],r[i+1]]=[r[i+1],r[i]],e=!0);if(n.push({type:"sorted",indices:[a-t-1],description:"Element ".concat(r[a-t-1]," is now in its correct sorted position")}),!e){const e=[];for(let n=0;n<a-t-1;n++)e.push(n);e.length>0&&n.push({type:"sorted",indices:e,description:"No swaps needed in this pass. Remaining elements are already sorted."});break}}return n},o=()=>(0,t.jsx)(a.A,{algorithmInfo:i,generateSteps:s})}}]);