"use strict";(self.webpackChunkdata_structure_visualizer=self.webpackChunkdata_structure_visualizer||[]).push([[9091],{69091:(n,e,i)=>{i.r(e),i.d(e,{default:()=>$});var t,r,s,o,a,l,c,d,h,m,x,g,p,u,f,b,y=i(57528),j=(i(9950),i(44752)),A=i(42074),w=i(54826),k=i(44414);const v=j.Ay.div(t||(t=(0,y.A)(["\n  display: flex;\n  flex-direction: column;\n  padding: 2rem;\n  height: 100%;\n  overflow-y: auto;\n\n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n"]))),z=j.Ay.div(r||(r=(0,y.A)(["\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.5rem;\n"]))),N=(0,j.Ay)(A.N_)(s||(s=(0,y.A)(["\n  display: flex;\n  align-items: center;\n  color: ",";\n  font-weight: 500;\n  text-decoration: none;\n  margin-right: 1rem;\n  \n  &:hover {\n    text-decoration: underline;\n  }\n  \n  svg {\n    margin-right: 0.5rem;\n  }\n\n  @media (max-width: 480px) {\n    font-size: 0.9rem;\n  }\n"])),n=>n.theme.colors.primary),T=j.Ay.div(o||(o=(0,y.A)(["\n  margin-bottom: 2rem;\n"]))),q=j.Ay.h1(a||(a=(0,y.A)(["\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  color: ",";\n\n  @media (max-width: 768px) {\n    font-size: 2rem;\n  }\n\n  @media (max-width: 480px) {\n    font-size: 1.5rem;\n  }\n"])),n=>n.theme.colors.text),C=j.Ay.p(l||(l=(0,y.A)(["\n  font-size: 1rem;\n  color: ",";\n  max-width: 800px;\n  line-height: 1.6;\n  margin-bottom: 2rem;\n\n  @media (max-width: 480px) {\n    font-size: 0.9rem;\n  }\n"])),n=>n.theme.colors.textLight),_=j.Ay.div(c||(c=(0,y.A)(["\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 1.5rem;\n  max-width: 1200px;\n\n  @media (max-width: 640px) {\n    grid-template-columns: 1fr;\n  }\n"]))),S=(0,j.Ay)(A.N_)(d||(d=(0,y.A)(["\n  display: flex;\n  flex-direction: column;\n  padding: 1.5rem;\n  background-color: ",";\n  border-radius: 0.5rem;\n  border: 1px solid ",";\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n  text-decoration: none;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n  }\n"])),n=>n.theme.colors.card,n=>n.theme.colors.border),B=j.Ay.div(h||(h=(0,y.A)(["\n  display: flex;\n  align-items: center;\n  margin-bottom: 1rem;\n"]))),O=j.Ay.div(m||(m=(0,y.A)(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 45px;\n  height: 45px;\n  border-radius: 50%;\n  background-color: ","20;\n  margin-right: 1rem;\n  color: ",";\n"])),n=>n.theme.colors.primary,n=>n.theme.colors.primary),L=j.Ay.h3(x||(x=(0,y.A)(["\n  font-size: 1.25rem;\n  color: ",";\n  font-weight: 600;\n  margin: 0;\n"])),n=>n.theme.colors.text),Q=j.Ay.p(g||(g=(0,y.A)(["\n  font-size: 0.9rem;\n  color: ",";\n  line-height: 1.5;\n  flex-grow: 1;\n"])),n=>n.theme.colors.textLight),P=j.Ay.div(p||(p=(0,y.A)(["\n  margin-top: 1rem;\n  font-size: 0.8rem;\n  color: ",";\n  border-top: 1px solid ",";\n  padding-top: 0.75rem;\n"])),n=>n.theme.colors.textLight,n=>n.theme.colors.border),F=j.Ay.div(u||(u=(0,y.A)(["\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 0.25rem;\n"]))),V=j.Ay.span(f||(f=(0,y.A)(["\n  font-weight: 500;\n"]))),Y=j.Ay.span(b||(b=(0,y.A)(["\n  font-family: monospace;\n"]))),$=()=>(0,k.jsxs)(v,{children:[(0,k.jsx)(z,{children:(0,k.jsxs)(N,{to:"/algorithms",children:[(0,k.jsx)(w.QVr,{})," Back to Algorithms"]})}),(0,k.jsxs)(T,{children:[(0,k.jsx)(q,{children:"Backtracking Algorithms"}),(0,k.jsx)(C,{children:'Backtracking is a general algorithmic technique that incrementally builds candidates to a solution and abandons a candidate ("backtracks") as soon as it determines that the candidate cannot be extended to a valid solution. Backtracking algorithms are particularly useful for solving constraint satisfaction problems, such as puzzles, combinatorial optimization problems, and other search-based challenges.'})]}),(0,k.jsxs)(_,{children:[(0,k.jsxs)(S,{to:"/algorithms/backtracking/nqueens",children:[(0,k.jsxs)(B,{children:[(0,k.jsx)(O,{children:(0,k.jsx)(w.gq4,{size:24})}),(0,k.jsx)(L,{children:"N-Queens"})]}),(0,k.jsx)(Q,{children:"The N-Queens problem asks how to place N chess queens on an N\xd7N chessboard so that no two queens threaten each other. This classic problem demonstrates the power of backtracking to find valid arrangements by trying different queen placements and undoing those that lead to conflicts."}),(0,k.jsxs)(P,{children:[(0,k.jsxs)(F,{children:[(0,k.jsx)(V,{children:"Time Complexity:"}),(0,k.jsx)(Y,{children:"O(N!)"})]}),(0,k.jsxs)(F,{children:[(0,k.jsx)(V,{children:"Space Complexity:"}),(0,k.jsx)(Y,{children:"O(N)"})]})]})]}),(0,k.jsxs)(S,{to:"/algorithms/backtracking/traveling-salesman",children:[(0,k.jsxs)(B,{children:[(0,k.jsx)(O,{children:(0,k.jsx)(w.$Fg,{size:24})}),(0,k.jsx)(L,{children:"Traveling Salesman"})]}),(0,k.jsx)(Q,{children:"The Traveling Salesman Problem (TSP) is about finding the shortest possible route that visits each city exactly once and returns to the origin city. This visualization shows how backtracking with pruning can be used to find the optimal route through a set of cities."}),(0,k.jsxs)(P,{children:[(0,k.jsxs)(F,{children:[(0,k.jsx)(V,{children:"Time Complexity:"}),(0,k.jsx)(Y,{children:"O(N!)"})]}),(0,k.jsxs)(F,{children:[(0,k.jsx)(V,{children:"Space Complexity:"}),(0,k.jsx)(Y,{children:"O(N)"})]})]})]})]})]})}}]);