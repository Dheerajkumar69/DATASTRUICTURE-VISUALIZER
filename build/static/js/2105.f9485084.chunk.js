"use strict";(self.webpackChunkdata_structure_visualizer=self.webpackChunkdata_structure_visualizer||[]).push([[2105],{32105:(e,n,t)=>{t.r(n),t.d(n,{default:()=>J});var r,o,i,s,l,d,c,a,h,m,u,x,g,f,p,j,y,b,v,A=t(89379),w=t(57528),k=t(9950),S=t(44752),C=t(42074),P=t(54826),L=t(44414);const T=S.Ay.div(r||(r=(0,w.A)(["\n  display: flex;\n  flex-direction: column;\n  padding: 2rem;\n  height: 100%;\n  overflow-y: auto;\n\n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n"]))),N=S.Ay.div(o||(o=(0,w.A)(["\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.5rem;\n"]))),I=(0,S.Ay)(C.N_)(i||(i=(0,w.A)(["\n  display: flex;\n  align-items: center;\n  color: ",";\n  font-weight: 500;\n  text-decoration: none;\n  margin-right: 1rem;\n  \n  &:hover {\n    text-decoration: underline;\n  }\n  \n  svg {\n    margin-right: 0.5rem;\n  }\n"])),e=>e.theme.colors.primary),F=S.Ay.div(s||(s=(0,w.A)(["\n  margin-bottom: 2rem;\n"]))),z=S.Ay.h1(l||(l=(0,w.A)(["\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  color: ",";\n"])),e=>e.theme.colors.text),E=S.Ay.p(d||(d=(0,w.A)(["\n  font-size: 1rem;\n  color: ",";\n  max-width: 800px;\n  line-height: 1.6;\n  margin-bottom: 2rem;\n"])),e=>e.theme.colors.textLight),O=S.Ay.div(c||(c=(0,w.A)(["\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n  max-width: 800px;\n"]))),R=S.Ay.button(a||(a=(0,w.A)(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.75rem 1rem;\n  background-color: ",";\n  color: ",";\n  border: 1px solid ",";\n  border-radius: 0.5rem;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background-color: ",";\n  }\n  \n  svg {\n    margin-right: 0.5rem;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n"])),e=>e.theme.colors.card,e=>e.theme.colors.text,e=>e.theme.colors.border,e=>e.theme.colors.hover),_=S.Ay.div(h||(h=(0,w.A)(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 2rem;\n  position: relative;\n  width: 100%;\n  height: 500px;\n  border: 1px solid ",";\n  border-radius: 0.5rem;\n  overflow: hidden;\n  background-color: ",";\n"])),e=>e.theme.colors.border,e=>e.theme.colors.card),M=S.Ay.div(m||(m=(0,w.A)(["\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 1rem;\n  align-items: center;\n  flex-wrap: wrap;\n"]))),W=S.Ay.div(u||(u=(0,w.A)(["\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n"]))),B=S.Ay.label(x||(x=(0,w.A)(["\n  font-size: 0.875rem;\n  color: ",";\n"])),e=>e.theme.colors.text),H=S.Ay.select(g||(g=(0,w.A)(["\n  padding: 0.5rem;\n  border: 1px solid ",";\n  border-radius: ",";\n  border: 1px solid ",";\n  background-color: ",";\n  color: ",";\n"])),e=>e.theme.colors.border,e=>e.theme.borderRadius,e=>{let{theme:n}=e;return n.colors.border},e=>e.theme.colors.card,e=>e.theme.colors.text),q=S.Ay.div(f||(f=(0,w.A)(["\n  padding: 1rem;\n  background-color: ",";\n  border-radius: 0.5rem;\n  border: 1px solid ",";\n  margin-bottom: 2rem;\n  max-width: 800px;\n  width: 100%;\n"])),e=>e.theme.colors.card,e=>e.theme.colors.border),D=S.Ay.h3(p||(p=(0,w.A)(["\n  margin-bottom: 0.5rem;\n  color: ",";\n  font-size: 1.2rem;\n"])),e=>e.theme.colors.text),G=S.Ay.p(j||(j=(0,w.A)(["\n  color: ",";\n  margin-bottom: 0.5rem;\n  line-height: 1.5;\n  font-size: 0.9rem;\n"])),e=>e.theme.colors.textLight),K=S.Ay.div(y||(y=(0,w.A)(["\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  margin-top: 1rem;\n  justify-content: center;\n"]))),Q=S.Ay.div(b||(b=(0,w.A)(["\n  display: flex;\n  align-items: center;\n  font-size: 0.875rem;\n  color: ",";\n"])),e=>e.theme.colors.textLight),V=S.Ay.div(v||(v=(0,w.A)(["\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background-color: ",";\n  margin-right: 0.5rem;\n"])),e=>e.color),J=()=>{const[e,n]=(0,k.useState)(null),[t,r]=(0,k.useState)([]),[o,i]=(0,k.useState)(0),[s,l]=(0,k.useState)(!1),[d,c]=(0,k.useState)(!1),[a,h]=(0,k.useState)(1e3),[m,u]=(0,k.useState)(0),[x,g]=(0,k.useState)(0),[f,p]=(0,k.useState)([]),j=(0,k.useRef)(null);(0,k.useEffect)(()=>{const e=b();n(e);const t=[];y(e,t),p(t),t.length>=2&&(u(t[1].id),g(t[t.length-1].id))},[]);const y=(e,n)=>{n.push({id:e.id,value:e.value});for(const t of e.children)y(t,n)},b=()=>{const e={id:1,value:"1",state:"default",x:0,y:0,children:[],parent:null},n={id:2,value:"2",state:"default",x:0,y:0,children:[],parent:e},t={id:3,value:"3",state:"default",x:0,y:0,children:[],parent:e},r={id:4,value:"4",state:"default",x:0,y:0,children:[],parent:n},o={id:5,value:"5",state:"default",x:0,y:0,children:[],parent:n},i={id:6,value:"6",state:"default",x:0,y:0,children:[],parent:t},s={id:7,value:"7",state:"default",x:0,y:0,children:[],parent:t};return n.children=[r,o],t.children=[i,s],e.children=[n,t],e};(0,k.useEffect)(()=>{let e;return s&&!d&&o<t.length-1?e=setTimeout(()=>{i(e=>e+1)},a):o>=t.length-1&&l(!1),()=>{e&&clearTimeout(e)}},[s,d,o,t,a]);const v=()=>{if(!e)return;l(!1),c(!1),i(0);const n=[];let t=w(e);n.push({tree:t,description:"Starting LCA algorithm to find the lowest common ancestor of nodes ".concat(m," and ").concat(x,"."),nodePath1:[],nodePath2:[],lca:null,currentNodeId:null});const o=[],s=[];S(t,m,o),S(t,x,s),t=w(e),t=w(e),n.push({tree:t,description:"Found paths from root to both nodes. Path to node ".concat(m,": [").concat(o.join(" \u2192 "),"], Path to node ").concat(x,": [").concat(s.join(" \u2192 "),"]"),nodePath1:[...o],nodePath2:[...s],lca:null,currentNodeId:null});let d=0;for(;d<o.length&&d<s.length&&o[d]===s[d];)t=w(e),C(t,o[d],"highlight"),n.push({tree:t,description:"Checking if node ".concat(o[d]," is a common ancestor..."),nodePath1:[...o],nodePath2:[...s],lca:null,currentNodeId:o[d]}),d++;const a=o[d-1];t=w(e),J(t,o,"path"),J(t,s,"path"),C(t,a,"lca"),C(t,m,"selected"),C(t,x,"selected"),n.push({tree:t,description:"Found the Lowest Common Ancestor: node ".concat(a),nodePath1:[...o],nodePath2:[...s],lca:a,currentNodeId:a}),r(n)},w=e=>{const n=(0,A.A)((0,A.A)({},e),{},{children:[],parent:null});return n.children=e.children.map(e=>{const t=w(e);return t.parent=n,t}),n},S=function(e,n){let t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[];if(t.push(e.id),e.id===n)return!0;for(const r of e.children)if(S(r,n,t))return!0;return t.pop(),!1},C=(e,n,t)=>{if(e.id!==n)for(const r of e.children)C(r,n,t);else e.state=t},J=(e,n,t)=>{for(const r of n){if(e.id===r)return void(e.state=t);for(const r of e.children)J(r,n,t)}},U=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:400,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:50,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:800;if(e.x=n,e.y=t,0===e.children.length)return;const i=t+80,s=o/2**r;for(let l=0;l<e.children.length;l++){const t=n-o/2+s*(l+.5);U(e.children[l],t,i,r+1,l,o)}},X=()=>{const n=j.current;if(!n||!e)return;const t=n.getContext("2d");t&&(t.clearRect(0,0,n.width,n.height),U(e,n.width/2,50),Y(t,e),Z(t,e))},Y=(e,n)=>{for(const r of n.children){e.beginPath(),e.moveTo(n.x,n.y),e.lineTo(r.x,r.y);const i=t.length>0?t[o]:null;if(i){const t=i.nodePath1,o=i.nodePath2;t.includes(n.id)&&t.includes(r.id)&&1===Math.abs(t.indexOf(n.id)-t.indexOf(r.id))?e.strokeStyle="#4299e1":o.includes(n.id)&&o.includes(r.id)&&1===Math.abs(o.indexOf(n.id)-o.indexOf(r.id))?e.strokeStyle="#48bb78":e.strokeStyle="#a0aec0"}else e.strokeStyle="#a0aec0";e.lineWidth=2,e.stroke(),Y(e,r)}},Z=(e,n)=>{switch(e.beginPath(),e.arc(n.x,n.y,20,0,2*Math.PI),n.state){case"highlight":e.fillStyle="#faf089";break;case"selected":e.fillStyle="#4299e1";break;case"path":e.fillStyle="#90cdf4";break;case"lca":e.fillStyle="#f56565";break;default:e.fillStyle="#e2e8f0"}e.fill(),e.strokeStyle="#2d3748",e.lineWidth=2,e.stroke(),e.font="16px Arial",e.fillStyle="#2d3748",e.textAlign="center",e.textBaseline="middle",e.fillText(n.value,n.x,n.y);for(const t of n.children)Z(e,t)};(0,k.useEffect)(()=>{e&&X()},[e,o,t]),(0,k.useEffect)(()=>{const e=()=>{const e=j.current;e&&(e.width=e.offsetWidth,e.height=e.offsetHeight,X())};return window.addEventListener("resize",e),e(),()=>{window.removeEventListener("resize",e)}},[e]);const $=t.length>0&&o<t.length?t[o].description:'Click "Start" to run the LCA algorithm to find the lowest common ancestor.';return(0,L.jsxs)(T,{children:[(0,L.jsx)(N,{children:(0,L.jsxs)(I,{to:"/algorithms/problems",children:[(0,L.jsx)(P.QVr,{})," Back to Problems"]})}),(0,L.jsxs)(F,{children:[(0,L.jsx)(z,{children:"Lowest Common Ancestor in a Tree"}),(0,L.jsx)(E,{children:"Given a tree and two nodes, find the lowest common ancestor (LCA), which is the deepest node that has both nodes as descendants. The LCA of a node and itself is the node itself."})]}),(0,L.jsxs)(M,{children:[(0,L.jsxs)(W,{children:[(0,L.jsx)(B,{children:"Node 1:"}),(0,L.jsx)(H,{value:m,onChange:e=>u(parseInt(e.target.value,10)),disabled:s,children:f.map(e=>(0,L.jsxs)("option",{value:e.id,children:["Node ",e.value]},e.id))})]}),(0,L.jsxs)(W,{children:[(0,L.jsx)(B,{children:"Node 2:"}),(0,L.jsx)(H,{value:x,onChange:e=>g(parseInt(e.target.value,10)),disabled:s,children:f.map(e=>(0,L.jsxs)("option",{value:e.id,children:["Node ",e.value]},e.id))})]})]}),(0,L.jsxs)(O,{children:[(0,L.jsxs)(H,{value:a,onChange:e=>{h(parseInt(e.target.value,10))},children:[(0,L.jsx)("option",{value:"2000",children:"Slow"}),(0,L.jsx)("option",{value:"1000",children:"Medium"}),(0,L.jsx)("option",{value:"500",children:"Fast"})]}),!s||d?(0,L.jsxs)(R,{onClick:()=>{0===t.length&&v(),l(!0),c(!1)},children:[(0,L.jsx)(P.gSK,{})," ",d?"Resume":"Start"]}):(0,L.jsxs)(R,{onClick:()=>{c(!0)},children:[(0,L.jsx)(P.kwt,{})," Pause"]}),(0,L.jsxs)(R,{onClick:()=>{o>0&&i(e=>e-1)},disabled:0===o||s&&!d,children:[(0,L.jsx)(P.ttb,{})," Back"]}),(0,L.jsxs)(R,{onClick:()=>{0===t.length&&v(),o<t.length-1&&i(e=>e+1)},disabled:o>=t.length-1||s&&!d,children:[(0,L.jsx)(P.FH8,{})," Forward"]}),(0,L.jsxs)(R,{onClick:()=>{l(!1),c(!1),i(0)},disabled:s&&!d,children:[(0,L.jsx)(P.EEI,{})," Reset"]})]}),(0,L.jsxs)(q,{children:[(0,L.jsx)(D,{children:"Current Step"}),(0,L.jsx)(G,{children:$}),t.length>0&&o<t.length&&t[o].lca&&(0,L.jsxs)(G,{children:[(0,L.jsx)("strong",{children:"LCA: "}),"Node ",t[o].lca]})]}),(0,L.jsx)(_,{children:(0,L.jsx)("canvas",{ref:j,width:800,height:500,style:{width:"100%",height:"100%"}})}),(0,L.jsxs)(K,{children:[(0,L.jsxs)(Q,{children:[(0,L.jsx)(V,{color:"#e2e8f0"}),"Default Node"]}),(0,L.jsxs)(Q,{children:[(0,L.jsx)(V,{color:"#4299e1"}),"Selected Node"]}),(0,L.jsxs)(Q,{children:[(0,L.jsx)(V,{color:"#90cdf4"}),"Path Node"]}),(0,L.jsxs)(Q,{children:[(0,L.jsx)(V,{color:"#faf089"}),"Common Ancestor"]}),(0,L.jsxs)(Q,{children:[(0,L.jsx)(V,{color:"#f56565"}),"Lowest Common Ancestor"]})]}),(0,L.jsxs)(q,{children:[(0,L.jsx)(D,{children:"How It Works"}),(0,L.jsx)(G,{children:"1. The algorithm finds the path from the root to each of the two target nodes."}),(0,L.jsx)(G,{children:"2. These paths are stored as sequences of node IDs."}),(0,L.jsx)(G,{children:"3. The algorithm compares these paths from the beginning (root) until they diverge."}),(0,L.jsx)(G,{children:"4. The last common node in these paths is the Lowest Common Ancestor (LCA)."}),(0,L.jsx)(G,{children:"5. This approach works because the LCA is the deepest node that is present in both paths."})]}),(0,L.jsxs)(q,{children:[(0,L.jsx)(D,{children:"Time & Space Complexity"}),(0,L.jsxs)(G,{children:[(0,L.jsx)("strong",{children:"Time Complexity:"})," O(n) where n is the number of nodes in the tree. In the worst case, we need to visit every node in the tree to find the paths."]}),(0,L.jsxs)(G,{children:[(0,L.jsx)("strong",{children:"Space Complexity:"})," O(h) where h is the height of the tree. This is required for the recursion stack and storing the paths."]})]}),(0,L.jsxs)(q,{children:[(0,L.jsx)(D,{children:"Applications"}),(0,L.jsx)(G,{children:"\u2022 Phylogenetic Trees: Finding common ancestors in evolutionary biology"}),(0,L.jsx)(G,{children:"\u2022 File Systems: Finding common parent directories"}),(0,L.jsx)(G,{children:"\u2022 Computational Geometry: Finding common ancestors in hierarchy trees"}),(0,L.jsx)(G,{children:"\u2022 Social Networks: Finding common connections between users"}),(0,L.jsx)(G,{children:"\u2022 Natural Language Processing: Finding relationships in parse trees"})]})]})}}}]);