"use strict";(self.webpackChunkdata_structure_visualizer=self.webpackChunkdata_structure_visualizer||[]).push([[7986],{87986:(n,t,e)=>{e.r(t),e.d(t,{default:()=>s});e(9950);var r=e(48102),i=e(44414);const o={name:"Insertion Sort",description:"Insertion Sort is a simple sorting algorithm that works by building the final sorted array one item at a time. It is efficient for small data sets and is often used as part of more sophisticated algorithms. It works by taking elements from the unsorted part and inserting them into their correct position in the sorted part.",timeComplexityBest:"O(n)",timeComplexityAverage:"O(n\xb2)",timeComplexityWorst:"O(n\xb2)",spaceComplexity:"O(1)",stability:"Stable",implementations:[{language:"javascript",title:"Insertion Sort - JavaScript Implementation",code:"function insertionSort(arr) {\n  const n = arr.length;\n  \n  for (let i = 1; i < n; i++) {\n    // Store the current element to be inserted in the right place\n    const key = arr[i];\n    let j = i - 1;\n    \n    // Move elements of arr[0..i-1] that are greater than key\n    // to one position ahead of their current position\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      j--;\n    }\n    \n    // Place key at its correct position\n    arr[j + 1] = key;\n  }\n  \n  return arr;\n}"},{language:"python",title:"Insertion Sort - Python Implementation",code:"def insertion_sort(arr):\n    n = len(arr)\n    \n    # Traverse through 1 to n\n    for i in range(1, n):\n        key = arr[i]\n        j = i - 1\n        \n        # Move elements of arr[0..i-1] that are greater than key\n        # to one position ahead of their current position\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n            \n        # Place key at its correct position\n        arr[j + 1] = key\n    \n    return arr"},{language:"java",title:"Insertion Sort - Java Implementation",code:"public static void insertionSort(int[] arr) {\n    int n = arr.length;\n    \n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n        \n        // Move elements of arr[0..i-1] that are greater than key\n        // to one position ahead of their current position\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        \n        // Place key at its correct position\n        arr[j + 1] = key;\n    }\n}"},{language:"c++",title:"Insertion Sort - C++ Implementation",code:"void insertionSort(vector<int>& arr) {\n    int n = arr.size();\n    \n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n        \n        // Move elements of arr[0..i-1] that are greater than key\n        // to one position ahead of their current position\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        \n        // Place key at its correct position\n        arr[j + 1] = key;\n    }\n}"}]},a=n=>{const t=[],e=[...n],r=e.length;t.push({type:"sorted",indices:[0],description:"First element ".concat(e[0]," is already sorted")});for(let i=1;i<r;i++){const n=e[i];t.push({type:"compare",indices:[i],description:"Considering element ".concat(n," at index ").concat(i," for insertion into the sorted portion")});let r=i-1;for(;r>=0&&e[r]>n;)t.push({type:"compare",indices:[r,r+1],description:"Comparing ".concat(e[r]," at index ").concat(r," with ").concat(n)}),t.push({type:"swap",indices:[r,r+1],description:"Moving ".concat(e[r]," one position ahead to index ").concat(r+1)}),e[r+1]=e[r],r--;if(r+1!==i&&(t.push({type:"swap",indices:[r+1],description:"Placing ".concat(n," at its correct position (index ").concat(r+1,")")}),e[r+1]=n),t.push({type:"sorted",indices:[r+1],description:"Element ".concat(e[r+1]," is now in its correct sorted position at index ").concat(r+1)}),i>1){const n=[];for(let t=0;t<=i;t++)t!==r+1&&n.push(t);n.length>0&&t.push({type:"sorted",indices:n,description:"All elements from index 0 to ".concat(i," are now sorted")})}}return t},s=()=>(0,i.jsx)(r.A,{algorithmInfo:o,generateSteps:a})}}]);