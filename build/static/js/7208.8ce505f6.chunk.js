"use strict";(self.webpackChunkdata_structure_visualizer=self.webpackChunkdata_structure_visualizer||[]).push([[7208],{97208:(e,n,t)=>{t.r(n),t.d(n,{default:()=>te});var r,o,s,i,a,l,c,d,h,m,u,p,x,g,f,b,j,w,v,y,A,k,S,C=t(89379),N=t(57528),q=t(9950),z=t(44752),F=t(42074),O=t(54826),B=t(44414);const T=z.Ay.div(r||(r=(0,N.A)(["\n  display: flex;\n  flex-direction: column;\n  padding: 2rem;\n  height: 100%;\n  overflow-y: auto;\n\n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n"]))),J=z.Ay.div(o||(o=(0,N.A)(["\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.5rem;\n"]))),P=(0,z.Ay)(F.N_)(s||(s=(0,N.A)(["\n  display: flex;\n  align-items: center;\n  color: ",";\n  font-weight: 500;\n  text-decoration: none;\n  margin-right: 1rem;\n  \n  &:hover {\n    text-decoration: underline;\n  }\n  \n  svg {\n    margin-right: 0.5rem;\n  }\n"])),e=>e.theme.colors.primary),E=z.Ay.div(i||(i=(0,N.A)(["\n  margin-bottom: 2rem;\n"]))),I=z.Ay.h1(a||(a=(0,N.A)(["\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  color: ",";\n"])),e=>e.theme.colors.text),R=z.Ay.p(l||(l=(0,N.A)(["\n  font-size: 1rem;\n  color: ",";\n  max-width: 800px;\n  line-height: 1.6;\n  margin-bottom: 2rem;\n"])),e=>e.theme.colors.textLight),L=z.Ay.div(c||(c=(0,N.A)(["\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n  max-width: 800px;\n"]))),_=z.Ay.button(d||(d=(0,N.A)(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.75rem 1rem;\n  background-color: ",";\n  color: ",";\n  border: 1px solid ",";\n  border-radius: 0.5rem;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background-color: ",";\n  }\n  \n  svg {\n    margin-right: 0.5rem;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n"])),e=>e.theme.colors.card,e=>e.theme.colors.text,e=>e.theme.colors.border,e=>e.theme.colors.hover),V=z.Ay.div(h||(h=(0,N.A)(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 2rem;\n"]))),K=z.Ay.div(m||(m=(0,N.A)(["\n  display: grid;\n  grid-template-columns: repeat(8, 60px);\n  grid-template-rows: repeat(8, 60px);\n  border: 2px solid #2d3748;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: repeat(8, 40px);\n    grid-template-rows: repeat(8, 40px);\n  }\n"]))),M=z.Ay.div(u||(u=(0,N.A)(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  position: relative;\n  background-color: ",";\n  color: ",";\n  font-size: 1rem;\n  transition: all 0.3s ease;\n  \n  &:before {\n    content: ",";\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    font-size: 0.75rem;\n  }\n"])),e=>{const n=e.isBlack?"#b58863":"#f0d9b5";switch(e.cellState){case"start":return"#4299e1";case"end":return"#48bb78";case"queued":return e.isBlack?"#89c3a3":"#9ae6b4";case"visiting":return e.isBlack?"#e9c979":"#faf089";case"visited":return e.isBlack?"#80bde4":"#90cdf4";case"path":return e.isBlack?"#e6a045":"#f6ad55";default:return n}},e=>"default"===e.cellState?e.isBlack?"#f0d9b5":"#b58863":"#2d3748",e=>e.distance<1/0&&"start"!==e.cellState&&"end"!==e.cellState?"'".concat(e.distance,"'"):"''"),Q=z.Ay.div(p||(p=(0,N.A)(["\n  font-size: 1.5rem;\n  color: #2d3748;\n"]))),H=z.Ay.div(x||(x=(0,N.A)(["\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  margin-top: 1rem;\n  justify-content: center;\n"]))),W=z.Ay.div(g||(g=(0,N.A)(["\n  display: flex;\n  align-items: center;\n  font-size: 0.875rem;\n  color: ",";\n"])),e=>e.theme.colors.textLight),G=z.Ay.div(f||(f=(0,N.A)(["\n  width: 20px;\n  height: 20px;\n  border-radius: 4px;\n  background-color: ",";\n  margin-right: 0.5rem;\n"])),e=>e.color),D=z.Ay.div(b||(b=(0,N.A)(["\n  display: flex;\n  gap: 1rem;\n  margin-bottom: 1rem;\n  align-items: center;\n  flex-wrap: wrap;\n"]))),U=z.Ay.div(j||(j=(0,N.A)(["\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n"]))),X=z.Ay.label(w||(w=(0,N.A)(["\n  font-size: 0.875rem;\n  color: ",";\n"])),e=>e.theme.colors.text),Y=z.Ay.input(v||(v=(0,N.A)(["\n  padding: 0.5rem;\n  border: 1px solid ",";\n  border-radius: 0.25rem;\n  width: 3rem;\n  text-align: center;\n"])),e=>e.theme.colors.border),Z=z.Ay.div(y||(y=(0,N.A)(["\n  padding: 1rem;\n  background-color: ",";\n  border-radius: 0.5rem;\n  border: 1px solid ",";\n  margin-bottom: 2rem;\n  max-width: 800px;\n  width: 100%;\n"])),e=>e.theme.colors.card,e=>e.theme.colors.border),$=z.Ay.h3(A||(A=(0,N.A)(["\n  margin-bottom: 0.5rem;\n  color: ",";\n  font-size: 1.2rem;\n"])),e=>e.theme.colors.text),ee=z.Ay.p(k||(k=(0,N.A)(["\n  color: ",";\n  margin-bottom: 0.5rem;\n  line-height: 1.5;\n  font-size: 0.9rem;\n"])),e=>e.theme.colors.textLight),ne=z.Ay.select(S||(S=(0,N.A)(["\n  padding: 0.5rem;\n  border: 1px solid ",";\n  border-radius: ",";\n  border: 1px solid ",";\n  background-color: ",";\n  color: ",";\n"])),e=>e.theme.colors.border,e=>e.theme.borderRadius,e=>{let{theme:n}=e;return n.colors.border},e=>e.theme.colors.card,e=>e.theme.colors.text),te=()=>{const[e,n]=(0,q.useState)([]),[t,r]=(0,q.useState)([]),[o,s]=(0,q.useState)(0),[i,a]=(0,q.useState)(!1),[l,c]=(0,q.useState)(!1),[d,h]=(0,q.useState)(500),[m,u]=(0,q.useState)({row:0,col:0}),[p,x]=(0,q.useState)({row:7,col:7});(0,q.useEffect)(()=>{g()},[m,p]),(0,q.useEffect)(()=>{let e;return i&&!l&&o<t.length-1?e=setTimeout(()=>{s(e=>e+1)},d):o>=t.length-1&&a(!1),()=>{e&&clearTimeout(e)}},[i,l,o,t,d]);const g=()=>{const e=[];for(let n=0;n<8;n++){const t=[];for(let e=0;e<8;e++)t.push({row:n,col:e,state:"default",distance:1/0,parent:null});e.push(t)}e[m.row][m.col].state="start",e[m.row][m.col].distance=0,e[p.row][p.col].state="end",n(e),r([]),s(0),a(!1),c(!1)},f=(e,n)=>e>=0&&e<8&&n>=0&&n<8,b=()=>{if(!e.length)return;a(!1),c(!1),s(0);const n=[],t=JSON.parse(JSON.stringify(e));n.push({grid:JSON.parse(JSON.stringify(t)),description:"Starting BFS algorithm to find the minimum number of knight moves. The numbers in each cell represent the distance from the start.",queue:[m],currentCell:null,pathFound:!1,shortestPath:[]});const o=[m];let i=!1;const l=[{dr:-2,dc:-1},{dr:-2,dc:1},{dr:-1,dc:-2},{dr:-1,dc:2},{dr:1,dc:-2},{dr:1,dc:2},{dr:2,dc:-1},{dr:2,dc:1}];for(;o.length>0&&!i;){const e=o.shift();if("visited"!==t[e.row][e.col].state){if("start"!==t[e.row][e.col].state&&"end"!==t[e.row][e.col].state&&(t[e.row][e.col].state="visiting"),n.push({grid:JSON.parse(JSON.stringify(t)),description:"Visiting position (".concat(e.row,", ").concat(e.col,") with distance ").concat(t[e.row][e.col].distance," from start."),queue:[...o],currentCell:e,pathFound:!1,shortestPath:[]}),e.row===p.row&&e.col===p.col){i=!0;const e=[];let r=t[p.row][p.col];for(;r.parent;){e.unshift({row:r.row,col:r.col});const n=r.parent;r=t[n.row][n.col]}e.unshift({row:m.row,col:m.col});for(const n of e)"start"!==t[n.row][n.col].state&&"end"!==t[n.row][n.col].state&&(t[n.row][n.col].state="path");n.push({grid:JSON.parse(JSON.stringify(t)),description:"Path found! The minimum number of knight moves from start to end is ".concat(t[p.row][p.col].distance,"."),queue:[],currentCell:null,pathFound:!0,shortestPath:e});break}"start"!==t[e.row][e.col].state&&"end"!==t[e.row][e.col].state&&(t[e.row][e.col].state="visited");for(const{dr:n,dc:r}of l){const s=e.row+n,i=e.col+r;f(s,i)&&"visited"!==t[s][i].state&&"queued"!==t[s][i].state&&("end"!==t[s][i].state&&(t[s][i].state="queued"),t[s][i].distance=t[e.row][e.col].distance+1,t[s][i].parent={row:e.row,col:e.col},o.push({row:s,col:i}))}i||n.push({grid:JSON.parse(JSON.stringify(t)),description:"Explored all possible knight moves from (".concat(e.row,", ").concat(e.col,"). Added valid positions to the queue."),queue:[...o],currentCell:null,pathFound:!1,shortestPath:[]})}}i||n.push({grid:JSON.parse(JSON.stringify(t)),description:"No path found from start to end. This should not happen with a knight on a standard chessboard.",queue:[],currentCell:null,pathFound:!1,shortestPath:[]}),r(n)},j=(e,n)=>{const t=parseInt(n,10);isNaN(t)||t<0||t>7||u(n=>(0,C.A)((0,C.A)({},n),{},{[e]:t}))},w=(e,n)=>{const t=parseInt(n,10);isNaN(t)||t<0||t>7||x(n=>(0,C.A)((0,C.A)({},n),{},{[e]:t}))},v=t.length>0&&o<t.length?t[o].grid:e,y=t.length>0&&o<t.length?t[o].description:'Click "Start" to run the BFS algorithm to find the minimum number of knight moves from start to end.';return(0,B.jsxs)(T,{children:[(0,B.jsx)(J,{children:(0,B.jsxs)(P,{to:"/algorithms/problems",children:[(0,B.jsx)(O.QVr,{})," Back to Problems"]})}),(0,B.jsxs)(E,{children:[(0,B.jsx)(I,{children:"Minimum Knight Moves on a Chessboard"}),(0,B.jsx)(R,{children:"Given a chessboard and a knight at a start position, find the minimum number of moves required to reach an end position. A knight can move in an L-shape: 2 squares horizontally and 1 square vertically, or 2 squares vertically and 1 square horizontally."})]}),(0,B.jsxs)(D,{children:[(0,B.jsxs)(U,{children:[(0,B.jsx)(X,{children:"Start Row:"}),(0,B.jsx)(Y,{type:"number",min:"0",max:"7",value:m.row,onChange:e=>j("row",e.target.value),disabled:i})]}),(0,B.jsxs)(U,{children:[(0,B.jsx)(X,{children:"Start Col:"}),(0,B.jsx)(Y,{type:"number",min:"0",max:"7",value:m.col,onChange:e=>j("col",e.target.value),disabled:i})]}),(0,B.jsxs)(U,{children:[(0,B.jsx)(X,{children:"End Row:"}),(0,B.jsx)(Y,{type:"number",min:"0",max:"7",value:p.row,onChange:e=>w("row",e.target.value),disabled:i})]}),(0,B.jsxs)(U,{children:[(0,B.jsx)(X,{children:"End Col:"}),(0,B.jsx)(Y,{type:"number",min:"0",max:"7",value:p.col,onChange:e=>w("col",e.target.value),disabled:i})]})]}),(0,B.jsxs)(L,{children:[(0,B.jsxs)(ne,{value:d,onChange:e=>{h(parseInt(e.target.value,10))},children:[(0,B.jsx)("option",{value:"1000",children:"Slow"}),(0,B.jsx)("option",{value:"500",children:"Medium"}),(0,B.jsx)("option",{value:"200",children:"Fast"})]}),!i||l?(0,B.jsxs)(_,{onClick:()=>{0===t.length&&b(),a(!0),c(!1)},children:[(0,B.jsx)(O.gSK,{})," ",l?"Resume":"Start"]}):(0,B.jsxs)(_,{onClick:()=>{c(!0)},children:[(0,B.jsx)(O.kwt,{})," Pause"]}),(0,B.jsxs)(_,{onClick:()=>{o>0&&s(e=>e-1)},disabled:0===o||i&&!l,children:[(0,B.jsx)(O.ttb,{})," Back"]}),(0,B.jsxs)(_,{onClick:()=>{0===t.length&&b(),o<t.length-1&&s(e=>e+1)},disabled:o>=t.length-1||i&&!l,children:[(0,B.jsx)(O.FH8,{})," Forward"]}),(0,B.jsxs)(_,{onClick:()=>{a(!1),c(!1),s(0)},disabled:i&&!l,children:[(0,B.jsx)(O.EEI,{})," Reset"]})]}),(0,B.jsxs)(Z,{children:[(0,B.jsx)($,{children:"Current Step"}),(0,B.jsx)(ee,{children:y}),t.length>0&&o<t.length&&t[o].queue.length>0&&(0,B.jsxs)(ee,{children:[(0,B.jsx)("strong",{children:"Queue size: "}),t[o].queue.length," positions"]})]}),(0,B.jsxs)(V,{children:[(0,B.jsx)(K,{children:v.map((e,n)=>e.map((e,t)=>{const r=(n+t)%2===1;return(0,B.jsx)(M,{isBlack:r,cellState:e.state,distance:e.distance,children:("start"===e.state||"end"===e.state||"path"===e.state)&&(0,B.jsx)(Q,{children:"\u265e"})},"".concat(n,"-").concat(t))}))}),(0,B.jsxs)(H,{children:[(0,B.jsxs)(W,{children:[(0,B.jsx)(G,{color:"#4299e1"}),"Start"]}),(0,B.jsxs)(W,{children:[(0,B.jsx)(G,{color:"#48bb78"}),"End"]}),(0,B.jsxs)(W,{children:[(0,B.jsx)(G,{color:"#9ae6b4"}),"Queued"]}),(0,B.jsxs)(W,{children:[(0,B.jsx)(G,{color:"#faf089"}),"Visiting"]}),(0,B.jsxs)(W,{children:[(0,B.jsx)(G,{color:"#90cdf4"}),"Visited"]}),(0,B.jsxs)(W,{children:[(0,B.jsx)(G,{color:"#f6ad55"}),"Path"]})]})]}),(0,B.jsxs)(Z,{children:[(0,B.jsx)($,{children:"How It Works"}),(0,B.jsxs)(ee,{children:["1. The algorithm uses ",(0,B.jsx)("strong",{children:"Breadth-First Search (BFS)"})," to find the minimum number of knight moves."]}),(0,B.jsx)(ee,{children:"2. Starting from the knight's initial position, we explore all positions that can be reached in 1 move, then 2 moves, etc."}),(0,B.jsx)(ee,{children:"3. For each position, we explore all 8 possible L-shaped knight moves and add valid positions to a queue."}),(0,B.jsx)(ee,{children:"4. The number in each cell represents the minimum number of moves needed to reach that position from the start."}),(0,B.jsx)(ee,{children:"5. When we reach the end position, we trace back through parent pointers to find the path of minimum moves."})]}),(0,B.jsxs)(Z,{children:[(0,B.jsx)($,{children:"Time & Space Complexity"}),(0,B.jsxs)(ee,{children:[(0,B.jsx)("strong",{children:"Time Complexity:"})," O(N\xb2) where N is the size of the chessboard (8\xd78 = 64 cells). In the worst case, we visit every cell on the board."]}),(0,B.jsxs)(ee,{children:[(0,B.jsx)("strong",{children:"Space Complexity:"})," O(N\xb2) for the queue, the grid representation, and the parent pointers."]})]}),(0,B.jsxs)(Z,{children:[(0,B.jsx)($,{children:"Interesting Facts"}),(0,B.jsx)(ee,{children:"\u2022 On a standard 8\xd78 chessboard, a knight can reach any position from any other position."}),(0,B.jsx)(ee,{children:"\u2022 The maximum number of moves required is 6 (proven mathematically)."}),(0,B.jsx)(ee,{children:'\u2022 The "Knight\'s Tour" is a related problem where the knight must visit every square exactly once.'}),(0,B.jsx)(ee,{children:"\u2022 This problem is a classic example of BFS application, as it guarantees the shortest path in an unweighted graph."})]}),(0,B.jsxs)(Z,{children:[(0,B.jsx)($,{children:"Applications"}),(0,B.jsx)(ee,{children:"\u2022 Chess engines and analysis tools"}),(0,B.jsx)(ee,{children:"\u2022 Puzzle games involving chess piece movements"}),(0,B.jsx)(ee,{children:"\u2022 Pathfinding in grid-based games with custom movement rules"}),(0,B.jsx)(ee,{children:"\u2022 Robot motion planning with constrained movement patterns"}),(0,B.jsx)(ee,{children:"\u2022 Analysis of specialized transportation networks"})]})]})}}}]);