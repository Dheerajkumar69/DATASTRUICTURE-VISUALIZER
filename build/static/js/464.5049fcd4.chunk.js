"use strict";(self.webpackChunkdata_structure_visualizer=self.webpackChunkdata_structure_visualizer||[]).push([[464],{90464:(e,t,n)=>{n.r(t),n.d(t,{default:()=>H});var r,o,s,i,l,c,a,d,h,p,u,m,g,x,f,b,j,w,y=n(57528),v=n(9950),A=n(44752),S=n(42074),k=n(54826),C=n(44414);const O=A.Ay.div(r||(r=(0,y.A)(["\n  display: flex;\n  flex-direction: column;\n  padding: 2rem;\n  height: 100%;\n  overflow-y: auto;\n\n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n"]))),T=A.Ay.div(o||(o=(0,y.A)(["\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.5rem;\n"]))),F=(0,A.Ay)(S.N_)(s||(s=(0,y.A)(["\n  display: flex;\n  align-items: center;\n  color: ",";\n  font-weight: 500;\n  text-decoration: none;\n  margin-right: 1rem;\n  \n  &:hover {\n    text-decoration: underline;\n  }\n  \n  svg {\n    margin-right: 0.5rem;\n  }\n"])),e=>e.theme.colors.primary),N=A.Ay.div(i||(i=(0,y.A)(["\n  margin-bottom: 2rem;\n"]))),q=A.Ay.h1(l||(l=(0,y.A)(["\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  color: ",";\n"])),e=>e.theme.colors.text),J=A.Ay.p(c||(c=(0,y.A)(["\n  font-size: 1rem;\n  color: ",";\n  max-width: 800px;\n  line-height: 1.6;\n  margin-bottom: 2rem;\n"])),e=>e.theme.colors.textLight),P=A.Ay.div(a||(a=(0,y.A)(["\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n  max-width: 800px;\n"]))),z=A.Ay.button(d||(d=(0,y.A)(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.75rem 1rem;\n  background-color: ",";\n  color: ",";\n  border: 1px solid ",";\n  border-radius: 0.5rem;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background-color: ",";\n  }\n  \n  svg {\n    margin-right: 0.5rem;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n"])),e=>e.theme.colors.card,e=>e.theme.colors.text,e=>e.theme.colors.border,e=>e.theme.colors.hover),R=A.Ay.div(h||(h=(0,y.A)(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 2rem;\n"]))),B=A.Ay.div(p||(p=(0,y.A)(["\n  display: grid;\n  grid-template-columns: repeat(15, 35px);\n  grid-template-rows: repeat(15, 35px);\n  gap: 2px;\n  margin-bottom: 1rem;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: repeat(15, 25px);\n    grid-template-rows: repeat(15, 25px);\n  }\n"]))),E=A.Ay.div(u||(u=(0,y.A)(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  border-radius: 4px;\n  background-color: ",";\n  color: ",";\n  font-size: 0.75rem;\n  transition: all 0.3s ease;\n  \n  &:after {\n    content: ",";\n  }\n"])),e=>{if("obstacle"===e.cellType)return"#2d3748";if("start"===e.cellType)return"#4299e1";if("end"===e.cellType)return"#48bb78";switch(e.cellState){case"queued":return"#9ae6b4";case"visiting":return"#faf089";case"visited":return"#90cdf4";case"path":return"#f6ad55";default:return"#edf2f7"}},e=>"obstacle"===e.cellType?"white":"path"===e.cellState?"black":"start"===e.cellType||"end"===e.cellType?"white":e.distance<1/0?"#2d3748":"#a0aec0",e=>e.distance<1/0&&"start"!==e.cellType&&"end"!==e.cellType&&"obstacle"!==e.cellType?"'".concat(e.distance,"'"):"''"),I=A.Ay.div(m||(m=(0,y.A)(["\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  margin-top: 1rem;\n  justify-content: center;\n"]))),V=A.Ay.div(g||(g=(0,y.A)(["\n  display: flex;\n  align-items: center;\n  font-size: 0.875rem;\n  color: ",";\n"])),e=>e.theme.colors.textLight),_=A.Ay.div(x||(x=(0,y.A)(["\n  width: 20px;\n  height: 20px;\n  border-radius: 4px;\n  background-color: ",";\n  margin-right: 0.5rem;\n"])),e=>e.color),G=A.Ay.div(f||(f=(0,y.A)(["\n  padding: 1rem;\n  background-color: ",";\n  border-radius: 0.5rem;\n  border: 1px solid ",";\n  margin-bottom: 2rem;\n  max-width: 800px;\n  width: 100%;\n"])),e=>e.theme.colors.card,e=>e.theme.colors.border),L=A.Ay.h3(b||(b=(0,y.A)(["\n  margin-bottom: 0.5rem;\n  color: ",";\n  font-size: 1.2rem;\n"])),e=>e.theme.colors.text),M=A.Ay.p(j||(j=(0,y.A)(["\n  color: ",";\n  margin-bottom: 0.5rem;\n  line-height: 1.5;\n  font-size: 0.9rem;\n"])),e=>e.theme.colors.textLight),Q=A.Ay.select(w||(w=(0,y.A)(["\n  padding: 0.5rem;\n  border: 1px solid ",";\n  border-radius: ",";\n  border: 1px solid ",";\n  background-color: ",";\n  color: ",";\n"])),e=>e.theme.colors.border,e=>e.theme.borderRadius,e=>{let{theme:t}=e;return t.colors.border},e=>e.theme.colors.card,e=>e.theme.colors.text),H=()=>{const[e,t]=(0,v.useState)([]),[n,r]=(0,v.useState)([]),[o,s]=(0,v.useState)(0),[i,l]=(0,v.useState)(!1),[c,a]=(0,v.useState)(!1),[d,h]=(0,v.useState)(500),[p,u]=(0,v.useState)(20);(0,v.useEffect)(()=>{m()},[p]),(0,v.useEffect)(()=>{let e;return i&&!c&&o<n.length-1?e=setTimeout(()=>{s(e=>e+1)},d):o>=n.length-1&&l(!1),()=>{e&&clearTimeout(e)}},[i,c,o,n,d]);const m=()=>{const e=[];for(let t=0;t<15;t++){const n=[];for(let e=0;e<15;e++)n.push({row:t,col:e,type:"empty",state:"default",distance:1/0,parent:null});e.push(n)}for(let t=0;t<15;t++)for(let n=0;n<15;n++)100*Math.random()<p&&(e[t][n].type="obstacle");e[0][0].type="start",e[0][0].distance=0,e[14][14].type="end",t(e),r([]),s(0),l(!1),a(!1)},g=()=>{if(!e.length)return;l(!1),a(!1),s(0);const t=[],n=e.length,o=e[0].length,i=JSON.parse(JSON.stringify(e));let c={row:0,col:0},d={row:n-1,col:o-1};for(let e=0;e<n;e++)for(let t=0;t<o;t++)"start"===i[e][t].type?(c={row:e,col:t},i[e][t].distance=0):"end"===i[e][t].type&&(d={row:e,col:t});t.push({grid:JSON.parse(JSON.stringify(i)),description:"Starting BFS algorithm to find the shortest path. The numbers in each cell represent the distance from the start.",queue:[c],currentCell:null,pathFound:!1,shortestPath:[]});const h=[c];let p=!1;const u=[{dr:-1,dc:0},{dr:0,dc:1},{dr:1,dc:0},{dr:0,dc:-1}];for(;h.length>0&&!p;){const e=h.shift();if("obstacle"!==i[e.row][e.col].type&&"visited"!==i[e.row][e.col].state){if(i[e.row][e.col].state="visiting",t.push({grid:JSON.parse(JSON.stringify(i)),description:"Visiting cell at (".concat(e.row,", ").concat(e.col,") with distance ").concat(i[e.row][e.col].distance,"."),queue:[...h],currentCell:e,pathFound:!1,shortestPath:[]}),e.row===d.row&&e.col===d.col){p=!0;const e=[];let n=i[d.row][d.col];for(;n.parent;){e.unshift({row:n.row,col:n.col});const t=n.parent;n=i[t.row][t.col]}e.unshift({row:c.row,col:c.col});for(const t of e)"start"!==i[t.row][t.col].type&&"end"!==i[t.row][t.col].type&&(i[t.row][t.col].state="path");t.push({grid:JSON.parse(JSON.stringify(i)),description:"Path found! The shortest path from start to end has length ".concat(i[d.row][d.col].distance,"."),queue:[],currentCell:null,pathFound:!0,shortestPath:e});break}i[e.row][e.col].state="visited";for(const{dr:t,dc:r}of u){const s=e.row+t,l=e.col+r;s<0||s>=n||l<0||l>=o||"obstacle"!==i[s][l].type&&"visited"!==i[s][l].state&&"queued"!==i[s][l].state&&(i[s][l].distance=i[e.row][e.col].distance+1,i[s][l].parent={row:e.row,col:e.col},i[s][l].state="queued",h.push({row:s,col:l}))}p||t.push({grid:JSON.parse(JSON.stringify(i)),description:"Finished exploring cell at (".concat(e.row,", ").concat(e.col,"). Added unvisited neighbors to the queue."),queue:[...h],currentCell:null,pathFound:!1,shortestPath:[]})}}p||t.push({grid:JSON.parse(JSON.stringify(i)),description:"No path found from start to end. The end position is not reachable.",queue:[],currentCell:null,pathFound:!1,shortestPath:[]}),r(t)},x=n.length>0&&o<n.length?n[o].grid:e,f=n.length>0&&o<n.length?n[o].description:'Click "Start" to run the BFS algorithm to find the shortest path from start to end.';return(0,C.jsxs)(O,{children:[(0,C.jsx)(T,{children:(0,C.jsxs)(F,{to:"/algorithms/problems",children:[(0,C.jsx)(k.QVr,{})," Back to Problems"]})}),(0,C.jsxs)(N,{children:[(0,C.jsx)(q,{children:"Shortest Path in a Grid with Obstacles"}),(0,C.jsx)(J,{children:"Given a 2D grid with obstacles, find the shortest path from the top-left corner to the bottom-right corner. You can only move up, down, left, or right (4-directional movement), and cannot move through obstacles."})]}),(0,C.jsxs)(P,{children:[(0,C.jsxs)(Q,{value:p,onChange:e=>{u(parseInt(e.target.value,10))},children:[(0,C.jsx)("option",{value:"10",children:"10% Obstacles"}),(0,C.jsx)("option",{value:"20",children:"20% Obstacles"}),(0,C.jsx)("option",{value:"30",children:"30% Obstacles"}),(0,C.jsx)("option",{value:"40",children:"40% Obstacles"})]}),(0,C.jsx)(z,{onClick:m,children:"New Grid"}),(0,C.jsxs)(Q,{value:d,onChange:e=>{h(parseInt(e.target.value,10))},children:[(0,C.jsx)("option",{value:"1000",children:"Slow"}),(0,C.jsx)("option",{value:"500",children:"Medium"}),(0,C.jsx)("option",{value:"200",children:"Fast"})]}),!i||c?(0,C.jsxs)(z,{onClick:()=>{0===n.length&&g(),l(!0),a(!1)},children:[(0,C.jsx)(k.gSK,{})," ",c?"Resume":"Start"]}):(0,C.jsxs)(z,{onClick:()=>{a(!0)},children:[(0,C.jsx)(k.kwt,{})," Pause"]}),(0,C.jsxs)(z,{onClick:()=>{o>0&&s(e=>e-1)},disabled:0===o||i&&!c,children:[(0,C.jsx)(k.ttb,{})," Back"]}),(0,C.jsxs)(z,{onClick:()=>{0===n.length&&g(),o<n.length-1&&s(e=>e+1)},disabled:o>=n.length-1||i&&!c,children:[(0,C.jsx)(k.FH8,{})," Forward"]}),(0,C.jsxs)(z,{onClick:()=>{l(!1),a(!1),s(0)},disabled:i&&!c,children:[(0,C.jsx)(k.EEI,{})," Reset"]})]}),(0,C.jsxs)(G,{children:[(0,C.jsx)(L,{children:"Current Step"}),(0,C.jsx)(M,{children:f}),n.length>0&&o<n.length&&n[o].queue.length>0&&(0,C.jsxs)(M,{children:[(0,C.jsx)("strong",{children:"Queue size: "}),n[o].queue.length," cells"]})]}),(0,C.jsxs)(R,{children:[(0,C.jsx)(B,{children:x.map((e,t)=>e.map((e,n)=>(0,C.jsx)(E,{cellType:e.type,cellState:e.state,distance:e.distance},"".concat(t,"-").concat(n))))}),(0,C.jsxs)(I,{children:[(0,C.jsxs)(V,{children:[(0,C.jsx)(_,{color:"#4299e1"}),"Start"]}),(0,C.jsxs)(V,{children:[(0,C.jsx)(_,{color:"#48bb78"}),"End"]}),(0,C.jsxs)(V,{children:[(0,C.jsx)(_,{color:"#2d3748"}),"Obstacle"]}),(0,C.jsxs)(V,{children:[(0,C.jsx)(_,{color:"#9ae6b4"}),"Queued"]}),(0,C.jsxs)(V,{children:[(0,C.jsx)(_,{color:"#faf089"}),"Visiting"]}),(0,C.jsxs)(V,{children:[(0,C.jsx)(_,{color:"#90cdf4"}),"Visited"]}),(0,C.jsxs)(V,{children:[(0,C.jsx)(_,{color:"#f6ad55"}),"Path"]})]})]}),(0,C.jsxs)(G,{children:[(0,C.jsx)(L,{children:"How It Works"}),(0,C.jsxs)(M,{children:["1. The algorithm uses ",(0,C.jsx)("strong",{children:"Breadth-First Search (BFS)"})," to find the shortest path in an unweighted grid."]}),(0,C.jsx)(M,{children:"2. Starting from the start cell, we explore cells in layers - first visiting all cells at distance 1, then distance 2, etc."}),(0,C.jsx)(M,{children:"3. For each cell, we explore its 4 adjacent neighbors (up, right, down, left) and add unvisited non-obstacle cells to a queue."}),(0,C.jsx)(M,{children:"4. The number in each cell represents the shortest distance from the start."}),(0,C.jsx)(M,{children:"5. When we reach the end cell, we trace back through parent pointers to find the shortest path."})]}),(0,C.jsxs)(G,{children:[(0,C.jsx)(L,{children:"Time & Space Complexity"}),(0,C.jsxs)(M,{children:[(0,C.jsx)("strong",{children:"Time Complexity:"})," O(R \xd7 C) where R is the number of rows and C is the number of columns. In the worst case, we visit every cell in the grid."]}),(0,C.jsxs)(M,{children:[(0,C.jsx)("strong",{children:"Space Complexity:"})," O(R \xd7 C) for the queue, the grid representation, and the parent pointers."]})]}),(0,C.jsxs)(G,{children:[(0,C.jsx)(L,{children:"Applications"}),(0,C.jsx)(M,{children:"\u2022 Robotics: Path planning for robots in environments with obstacles"}),(0,C.jsx)(M,{children:"\u2022 Video Games: Finding paths for characters through game maps"}),(0,C.jsx)(M,{children:"\u2022 Networks: Routing in networks with blocked or congested nodes"}),(0,C.jsx)(M,{children:"\u2022 Maze Solving: Finding the shortest solution to a maze"}),(0,C.jsx)(M,{children:"\u2022 Logistics: Planning delivery routes avoiding restricted areas"})]})]})}}}]);