"use strict";(self.webpackChunkdata_structure_visualizer=self.webpackChunkdata_structure_visualizer||[]).push([[4807],{24807:(e,n,t)=>{t.r(n),t.d(n,{default:()=>W});var r,i,s,l,o,a,d,c,h,m,u,g,p,x,f,b=t(57528),j=t(9950),w=t(44752),y=t(42074),v=t(54826),A=t(44414);const C=w.Ay.div(r||(r=(0,b.A)(["\n  display: flex;\n  flex-direction: column;\n  padding: 2rem;\n  height: 100%;\n  overflow-y: auto;\n\n  @media (max-width: 768px) {\n    padding: 1rem;\n  }\n"]))),S=w.Ay.div(i||(i=(0,b.A)(["\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.5rem;\n"]))),k=(0,w.Ay)(y.N_)(s||(s=(0,b.A)(["\n  display: flex;\n  align-items: center;\n  color: ",";\n  font-weight: 500;\n  text-decoration: none;\n  margin-right: 1rem;\n  \n  &:hover {\n    text-decoration: underline;\n  }\n  \n  svg {\n    margin-right: 0.5rem;\n  }\n"])),e=>e.theme.colors.primary),I=w.Ay.div(l||(l=(0,b.A)(["\n  margin-bottom: 2rem;\n"]))),N=w.Ay.h1(o||(o=(0,b.A)(["\n  font-size: 2.5rem;\n  margin-bottom: 0.5rem;\n  color: ",";\n"])),e=>e.theme.colors.text),O=w.Ay.p(a||(a=(0,b.A)(["\n  font-size: 1rem;\n  color: ",";\n  max-width: 800px;\n  line-height: 1.6;\n  margin-bottom: 2rem;\n"])),e=>e.theme.colors.textLight),J=w.Ay.div(d||(d=(0,b.A)(["\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n  max-width: 800px;\n"]))),F=w.Ay.button(c||(c=(0,b.A)(["\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0.75rem 1rem;\n  background-color: ",";\n  color: ",";\n  border: 1px solid ",";\n  border-radius: 0.5rem;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background-color: ",";\n  }\n  \n  svg {\n    margin-right: 0.5rem;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n"])),e=>e.theme.colors.card,e=>e.theme.colors.text,e=>e.theme.colors.border,e=>e.theme.colors.hover),z=w.Ay.div(h||(h=(0,b.A)(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 2rem;\n"]))),T=w.Ay.div(m||(m=(0,b.A)(["\n  display: grid;\n  grid-template-columns: repeat(10, 40px);\n  grid-template-rows: repeat(10, 40px);\n  gap: 2px;\n  margin-bottom: 1rem;\n  \n  @media (max-width: 768px) {\n    grid-template-columns: repeat(10, 30px);\n    grid-template-rows: repeat(10, 30px);\n  }\n"]))),D=w.Ay.div(u||(u=(0,b.A)(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  border-radius: 4px;\n  background-color: ",";\n  color: ",";\n  transition: all 0.3s ease;\n"])),e=>{switch(e.state){case"water":default:return"#a0d2eb";case"land":return"#8d8741";case"visiting":return"#ff9800";case"visited":return"#4caf50";case"completed":return null!==e.islandId?"hsl(".concat(60*e.islandId%360,", 80%, 60%)"):"#a0d2eb"}},e=>"water"===e.state||"completed"===e.state?"white":"black"),R=w.Ay.div(g||(g=(0,b.A)(["\n  padding: 1rem;\n  background-color: ",";\n  border-radius: 0.5rem;\n  border: 1px solid ",";\n  margin-bottom: 2rem;\n  max-width: 800px;\n  width: 100%;\n"])),e=>e.theme.colors.card,e=>e.theme.colors.border),E=w.Ay.h3(p||(p=(0,b.A)(["\n  margin-bottom: 0.5rem;\n  color: ",";\n  font-size: 1.2rem;\n"])),e=>e.theme.colors.text),G=w.Ay.p(x||(x=(0,b.A)(["\n  color: ",";\n  margin-bottom: 0.5rem;\n  line-height: 1.5;\n  font-size: 0.9rem;\n"])),e=>e.theme.colors.textLight),_=w.Ay.select(f||(f=(0,b.A)(["\n  padding: 0.5rem;\n  border: 1px solid ",";\n  border-radius: ",";\n  border: 1px solid ",";\n  background-color: ",";\n  color: ",";\n"])),e=>e.theme.colors.border,e=>e.theme.borderRadius,e=>{let{theme:n}=e;return n.colors.border},e=>e.theme.colors.card,e=>e.theme.colors.text),W=()=>{const[e,n]=(0,j.useState)([]),[t,r]=(0,j.useState)([]),[i,s]=(0,j.useState)(0),[l,o]=(0,j.useState)(!1),[a,d]=(0,j.useState)(!1),[c,h]=(0,j.useState)(500);(0,j.useEffect)(()=>{m()},[]),(0,j.useEffect)(()=>{let e;return l&&!a&&i<t.length-1?e=setTimeout(()=>{s(e=>e+1)},c):i>=t.length-1&&o(!1),()=>{e&&clearTimeout(e)}},[l,a,i,t,c]);const m=()=>{const e=[];for(let n=0;n<10;n++){const t=[];for(let e=0;e<10;e++){const r=Math.random()<.3;t.push({row:n,col:e,state:r?"land":"water",islandId:null})}e.push(t)}n(e),r([]),s(0),o(!1),d(!1)},u=()=>{if(!e.length)return;o(!1),d(!1),s(0);const n=[],t=e.length,i=e[0].length,l=JSON.parse(JSON.stringify(e));n.push({grid:JSON.parse(JSON.stringify(l)),description:"Starting the island count algorithm. We will use DFS to explore connected land cells.",islandCount:0,currentIsland:null,currentCell:null});const a=(e,r,s)=>{e<0||e>=t||r<0||r>=i||"land"===l[e][r].state&&(l[e][r].state="visiting",l[e][r].islandId=s,n.push({grid:JSON.parse(JSON.stringify(l)),description:"Exploring land at (".concat(e,", ").concat(r,") as part of island #").concat(s,"."),islandCount:s,currentIsland:s,currentCell:{row:e,col:r}}),l[e][r].state="visited",n.push({grid:JSON.parse(JSON.stringify(l)),description:"Marked land at (".concat(e,", ").concat(r,") as visited."),islandCount:s,currentIsland:s,currentCell:{row:e,col:r}}),a(e+1,r,s),a(e-1,r,s),a(e,r+1,s),a(e,r-1,s),l[e][r].state="completed")};let c=0;for(let e=0;e<t;e++)for(let t=0;t<i;t++)"land"===l[e][t].state&&(c++,n.push({grid:JSON.parse(JSON.stringify(l)),description:"Found new island starting at (".concat(e,", ").concat(t,"). This will be island #").concat(c,"."),islandCount:c,currentIsland:c,currentCell:{row:e,col:t}}),a(e,t,c));n.push({grid:JSON.parse(JSON.stringify(l)),description:"Algorithm complete. Found ".concat(c," islands."),islandCount:c,currentIsland:null,currentCell:null}),r(n)},g=t.length>0&&i<t.length?t[i].grid:e,p=t.length>0&&i<t.length?t[i].description:"The Number of Islands problem involves counting connected components in a grid.";return(0,A.jsxs)(C,{children:[(0,A.jsx)(S,{children:(0,A.jsxs)(k,{to:"/algorithms/problems",children:[(0,A.jsx)(v.QVr,{})," Back to Problems"]})}),(0,A.jsxs)(I,{children:[(0,A.jsx)(N,{children:"Number of Islands"}),(0,A.jsx)(O,{children:"Given a 2D grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically."})]}),(0,A.jsxs)(J,{children:[(0,A.jsx)(F,{onClick:m,children:"Generate New Grid"}),(0,A.jsxs)(_,{value:c,onChange:e=>{h(parseInt(e.target.value,10))},children:[(0,A.jsx)("option",{value:"1000",children:"Slow"}),(0,A.jsx)("option",{value:"500",children:"Medium"}),(0,A.jsx)("option",{value:"200",children:"Fast"})]}),!l||a?(0,A.jsxs)(F,{onClick:()=>{0===t.length&&u(),o(!0),d(!1)},children:[(0,A.jsx)(v.gSK,{})," ",a?"Resume":"Start"]}):(0,A.jsxs)(F,{onClick:()=>{d(!0)},children:[(0,A.jsx)(v.kwt,{})," Pause"]}),(0,A.jsxs)(F,{onClick:()=>{i>0&&s(e=>e-1)},disabled:0===i||l&&!a,children:[(0,A.jsx)(v.ttb,{})," Back"]}),(0,A.jsxs)(F,{onClick:()=>{0===t.length&&u(),i<t.length-1&&s(e=>e+1)},disabled:i>=t.length-1||l&&!a,children:[(0,A.jsx)(v.FH8,{})," Forward"]}),(0,A.jsxs)(F,{onClick:()=>{o(!1),d(!1),s(0)},disabled:l&&!a,children:[(0,A.jsx)(v.EEI,{})," Reset"]})]}),(0,A.jsxs)(R,{children:[(0,A.jsx)(E,{children:"Current Step"}),(0,A.jsx)(G,{children:p}),t.length>0&&i<t.length&&(0,A.jsxs)(G,{children:[(0,A.jsx)("strong",{children:"Islands found so far: "}),t[i].islandCount]})]}),(0,A.jsx)(z,{children:(0,A.jsx)(T,{children:g.map((e,n)=>e.map((e,t)=>(0,A.jsx)(D,{state:e.state,islandId:e.islandId,children:null!==e.islandId?e.islandId:""},"".concat(n,"-").concat(t))))})}),(0,A.jsxs)(R,{children:[(0,A.jsx)(E,{children:"How It Works"}),(0,A.jsx)(G,{children:"1. We start with a grid where each cell is either land or water."}),(0,A.jsx)(G,{children:"2. To count islands, we scan the grid and when we find an unvisited land cell, we increment our island count."}),(0,A.jsx)(G,{children:"3. For each land cell, we use Depth-First Search (DFS) to explore all connected land cells, marking them as visited."}),(0,A.jsx)(G,{children:"4. After all cells have been explored, the island count represents the number of distinct islands in the grid."})]}),(0,A.jsxs)(R,{children:[(0,A.jsx)(E,{children:"Time & Space Complexity"}),(0,A.jsxs)(G,{children:[(0,A.jsx)("strong",{children:"Time Complexity:"})," O(R \xd7 C) where R is the number of rows and C is the number of columns. We visit each cell once."]}),(0,A.jsxs)(G,{children:[(0,A.jsx)("strong",{children:"Space Complexity:"})," O(R \xd7 C) for the visited array and recursion stack in the worst case."]})]}),(0,A.jsxs)(R,{children:[(0,A.jsx)(E,{children:"Applications"}),(0,A.jsx)(G,{children:"\u2022 Image Processing: Connected component labeling to identify distinct objects"}),(0,A.jsx)(G,{children:"\u2022 Game Development: Determining walkable areas or territory boundaries"}),(0,A.jsx)(G,{children:"\u2022 Computer Vision: Object detection and counting"}),(0,A.jsx)(G,{children:"\u2022 Geographic Information Systems: Identifying land masses or regions"}),(0,A.jsx)(G,{children:"\u2022 Network Analysis: Finding isolated network components"})]})]})}}}]);